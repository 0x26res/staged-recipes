From e2a0679b45ef574813ff49bdca5533cfaf802a30 Mon Sep 17 00:00:00 2001
From: "Lori A. Burns" <lori.burns@gmail.com>
Date: Wed, 24 May 2023 03:51:31 -0400
Subject: [PATCH 3/5] add CMake buildsystem for L, M, W platforms

---
 CMakeLists.txt                       | 153 ++++++++++++++++++++++++++
 cmake/CheckFortranCompilerFlag.cmake |  71 ++++++++++++
 cmake/autocmake_omp.cmake            |  72 +++++++++++++
 cmake/autocmake_safeguards.cmake     |  27 +++++
 cmake/custom_static_library.cmake    |  56 ++++++++++
 cmake/gdmaConfig.cmake.in            | 134 +++++++++++++++++++++++
 cmake/psi4OptionsTools.cmake         | 156 +++++++++++++++++++++++++++
 7 files changed, 669 insertions(+)
 create mode 100644 CMakeLists.txt
 create mode 100644 cmake/CheckFortranCompilerFlag.cmake
 create mode 100644 cmake/autocmake_omp.cmake
 create mode 100644 cmake/autocmake_safeguards.cmake
 create mode 100644 cmake/custom_static_library.cmake
 create mode 100644 cmake/gdmaConfig.cmake.in
 create mode 100644 cmake/psi4OptionsTools.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..3d572eb
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,153 @@
+cmake_policy(SET CMP0048 NEW)
+cmake_minimum_required(VERSION 3.16)
+project(gdma
+        VERSION 2.3.3
+        LANGUAGES C Fortran)
+set(gdma_AUTHORS      "Anthony J. Stone")
+set(gdma_DESCRIPTION  "Gaussian Distributed Multipole Analysis")
+set(gdma_URL          "https://www-stone.ch.cam.ac.uk/pub/gdma/")
+set(gdma_LICENSE      "GNU General Public License, version 3")
+
+list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
+
+################################### Options ####################################
+include(psi4OptionsTools)
+option_with_default(CMAKE_BUILD_TYPE "Build type" Release)
+option_with_print(BUILD_SHARED_LIBS "Build final library as shared, not static" OFF)
+option_with_default(BUILD_FPIC "Compile static libraries with position independent code" ON)
+option_with_print(ENABLE_OPENMP "Enable threadsafe linking to OpenMP parallelized programs." ON)
+option_with_default(CMAKE_INSTALL_LIBDIR "Directory to which libraries installed" lib)
+option_with_default(PYMOD_INSTALL_LIBDIR "If gdma_ENABLE_PYTHON, location within CMAKE_INSTALL_LIBDIR to which python modules are installed" /)
+option_with_print(ENABLE_GENERIC "Enable mostly static linking in shared library" OFF)
+option_with_flags(ENABLE_XHOST "Enable processor-specific optimization" ON
+                    "-xHost" "-march=native")
+option_with_default(ENABLE_GENERIC "Enables mostly static linking of system and math libraries for shared library" OFF)
+option_with_default(gdma_INSTALL_CMAKEDIR "Directory to which gdma CMake config files installed." share/cmake/gdma)
+option_with_print(gdma_ENABLE_PYTHON "Build Python bindings (requires Python and Pybind11)" OFF)
+
+######################### Process & Validate Options ###########################
+include(autocmake_safeguards)
+include(autocmake_omp)
+include(custom_static_library)
+
+set(CMAKECONFIG_INSTALL_DIR "${gdma_INSTALL_CMAKEDIR}")
+
+################################# Main Project #################################
+include(GNUInstallDirs)
+include(FortranCInterface)
+include(CMakePackageConfigHelpers)
+
+set(gdma ${PROJECT_NAME})
+
+# <<<  Build  >>>
+
+FortranCInterface_HEADER(GDMA_MANGLE.h
+                         MACRO_NAMESPACE "GDMA_MANGLE_"
+                         SYMBOL_NAMESPACE "GDMA_MANGLE_")
+set(raw_sources_list atom_grids.f90
+                     dma.f90
+                     gdma.f90
+                     input.F90
+                     timing.F90)
+set(src_prefix "src/")
+string(REGEX REPLACE "([^;]+)" "${src_prefix}\\1" sources_list "${raw_sources_list}")
+
+find_package(Python COMPONENTS Interpreter REQUIRED)
+# avoid overlong compiler names in Fortran src file. sometimes balks on line length.
+get_filename_component(_compiler_name ${CMAKE_Fortran_COMPILER} NAME)
+add_custom_command(
+  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/version.f90
+  COMMAND ${Python_EXECUTABLE} version.py ../VERSION ${CMAKE_CURRENT_BINARY_DIR}/version.f90 ${_compiler_name}
+  #COMMAND ${Python_EXECUTABLE} version.py ../VERSION ${CMAKE_CURRENT_BINARY_DIR}/version.f90 ${_compiler_name} --commit c2e0b548  # TODO
+  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src
+  COMMENT "Generating version info"
+  )
+
+# STATIC/SHARED on below governed by BUILD_SHARED_LIBS
+add_library(gdma ${sources_list} ${CMAKE_CURRENT_BINARY_DIR}/version.f90)
+add_library(gdma::gdma ALIAS gdma)
+if (NOT ${BUILD_SHARED_LIBS})
+    set_target_properties(gdma PROPERTIES POSITION_INDEPENDENT_CODE ${BUILD_FPIC})
+endif()
+if(${BUILD_SHARED_LIBS})
+    target_link_libraries(gdma PRIVATE ${LIBC_INTERJECT})
+
+    if(APPLE)
+        set_target_properties(gdma PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
+    endif()
+endif()
+
+set(export_properties
+  "gdma_VERSION"
+  )
+set_target_properties(gdma PROPERTIES gdma_VERSION ${gdma_VERSION})
+set_property(TARGET gdma APPEND PROPERTY EXPORT_PROPERTIES "${export_properties}")
+
+add_executable(gdmaexe src/exe.f90)
+add_executable(gdma::exe ALIAS gdmaexe)
+target_link_libraries(gdmaexe gdma)
+set_target_properties(gdmaexe
+  PROPERTIES
+    INSTALL_RPATH "$ORIGIN/../${CMAKE_INSTALL_LIBDIR}"
+    EXPORT_NAME "exe"
+    OUTPUT_NAME "gdma"
+  )
+
+# Python directory
+if (gdma_ENABLE_PYTHON)
+    add_subdirectory(pygdma)
+endif()
+
+# <<<  Install  >>>
+
+install(FILES ${PROJECT_BINARY_DIR}/GDMA_MANGLE.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/GDMA)
+install(
+  TARGETS
+    gdma
+    gdmaexe
+  EXPORT
+    library_interface
+  RUNTIME DESTINATION
+    ${CMAKE_INSTALL_BINDIR}
+  ARCHIVE DESTINATION
+    ${CMAKE_INSTALL_LIBDIR}
+  LIBRARY DESTINATION
+    ${CMAKE_INSTALL_LIBDIR}
+  PUBLIC_HEADER DESTINATION
+    ${CMAKE_INSTALL_INCLUDEDIR}
+  )
+
+# <<<  Export Interface  >>>
+
+target_compile_definitions(gdma INTERFACE USING_${gdma})
+target_include_directories(gdma INTERFACE
+                           $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
+
+# <<<  Export Config  >>>
+
+configure_package_config_file(cmake/${gdma}Config.cmake.in
+                              "${CMAKE_CURRENT_BINARY_DIR}/${gdma}Config.cmake"
+                              INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR})
+write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${gdma}ConfigVersion.cmake
+                                 VERSION ${${gdma}_VERSION}
+                                 COMPATIBILITY SameMajorVersion)
+install(
+  FILES
+    ${CMAKE_CURRENT_BINARY_DIR}/${gdma}Config.cmake
+    ${CMAKE_CURRENT_BINARY_DIR}/${gdma}ConfigVersion.cmake
+  DESTINATION
+    ${CMAKECONFIG_INSTALL_DIR}
+  )
+
+install(
+  EXPORT
+    library_interface
+  FILE
+    "${PROJECT_NAME}Targets-lib.cmake"
+  NAMESPACE
+    "${PROJECT_NAME}::"
+  DESTINATION
+    ${CMAKECONFIG_INSTALL_DIR}
+  )
+
diff --git a/cmake/CheckFortranCompilerFlag.cmake b/cmake/CheckFortranCompilerFlag.cmake
new file mode 100644
index 0000000..0a124f6
--- /dev/null
+++ b/cmake/CheckFortranCompilerFlag.cmake
@@ -0,0 +1,71 @@
+# Downloaded from
+#   https://github.com/Kitware/CMake/blob/master/Modules/CheckFortranCompilerFlag.cmake
+# * remove local copy when CMake >= 3.3 required
+
+#.rst:
+# CheckFortranCompilerFlag
+# ------------------------
+#
+# Check whether the Fortran compiler supports a given flag.
+#
+# CHECK_Fortran_COMPILER_FLAG(<flag> <var>)
+#
+# ::
+#
+#   <flag> - the compiler flag
+#   <var>  - variable to store the result
+#            Will be created as an internal cache variable.
+#
+# This internally calls the check_fortran_source_compiles macro and
+# sets CMAKE_REQUIRED_DEFINITIONS to <flag>.  See help for
+# CheckFortranSourceCompiles for a listing of variables that can
+# otherwise modify the build.  The result only tells that the compiler
+# does not give an error message when it encounters the flag.  If the
+# flag has any effect or even a specific one is beyond the scope of
+# this module.
+
+#=============================================================================
+# Copyright 2015 Nicolas Bock <nicolasbock@gmail.com>
+# Copyright 2006-2011 Kitware, Inc.
+# Copyright 2006 Alexander Neundorf <neundorf@kde.org>
+# Copyright 2011 Matthias Kretz <kretz@kde.org>
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+include(CheckFortranSourceCompiles)
+include(CMakeCheckCompilerFlagCommonPatterns)
+
+macro (CHECK_Fortran_COMPILER_FLAG _FLAG _RESULT)
+  set(SAFE_CMAKE_REQUIRED_DEFINITIONS "${CMAKE_REQUIRED_DEFINITIONS}")
+  set(CMAKE_REQUIRED_DEFINITIONS "${_FLAG}")
+
+  # Normalize locale during test compilation.
+  set(_CheckFortranCompilerFlag_LOCALE_VARS LC_ALL LC_MESSAGES LANG)
+  foreach(v ${_CheckFortranCompilerFlag_LOCALE_VARS})
+    set(_CheckFortranCompilerFlag_SAVED_${v} "$ENV{${v}}")
+    set(ENV{${v}} C)
+  endforeach()
+  CHECK_COMPILER_FLAG_COMMON_PATTERNS(_CheckFortranCompilerFlag_COMMON_PATTERNS)
+  CHECK_Fortran_SOURCE_COMPILES("       program test\n       stop\n       end program" ${_RESULT}
+    # Some compilers do not fail with a bad flag
+    FAIL_REGEX "command line option .* is valid for .* but not for Fortran" # GNU
+    ${_CheckFortranCompilerFlag_COMMON_PATTERNS}
+    )
+  foreach(v ${_CheckFortranCompilerFlag_LOCALE_VARS})
+    set(ENV{${v}} ${_CheckFortranCompilerFlag_SAVED_${v}})
+    unset(_CheckFortranCompilerFlag_SAVED_${v})
+  endforeach()
+  unset(_CheckFortranCompilerFlag_LOCALE_VARS)
+  unset(_CheckFortranCompilerFlag_COMMON_PATTERNS)
+
+  set (CMAKE_REQUIRED_DEFINITIONS "${SAFE_CMAKE_REQUIRED_DEFINITIONS}")
+endmacro ()
+
diff --git a/cmake/autocmake_omp.cmake b/cmake/autocmake_omp.cmake
new file mode 100644
index 0000000..0ce6db7
--- /dev/null
+++ b/cmake/autocmake_omp.cmake
@@ -0,0 +1,72 @@
+# Downloaded from
+#   https://github.com/coderefinery/autocmake/blob/master/modules/omp.cmake
+# * moved option up
+# * toggled option default to ON
+# * reorganized logic for Fortran + C/CXX, see https://github.com/coderefinery/autocmake/issues/177
+
+#.rst:
+#
+# Enables OpenMP support.
+#
+# Variables used::
+#
+#   ENABLE_OPENMP
+#   OPENMP_FOUND
+#
+# Variables modified (provided the corresponding language is enabled)::
+#
+#   CMAKE_Fortran_FLAGS
+#   CMAKE_C_FLAGS
+#   CMAKE_CXX_FLAGS
+#
+# autocmake.yml configuration::
+#
+#   docopt: "--omp Enable OpenMP parallelization [default: False]."
+#   define: "'-DENABLE_OPENMP={0}'.format(arguments['--omp'])"
+
+if(ENABLE_OPENMP)
+
+    if(NOT OPENMP_FOUND)
+        find_package(OpenMP)
+    endif()
+
+    if(OPENMP_FOUND)
+        add_definitions(-DHAVE_OPENMP)
+        if(DEFINED CMAKE_C_COMPILER_ID)
+            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
+        endif()
+        if(DEFINED CMAKE_CXX_COMPILER_ID)
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
+        endif()
+        if(DEFINED CMAKE_Fortran_COMPILER_ID)
+            set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${OpenMP_Fortran_FLAGS}")
+        endif()
+    endif()
+
+    if(DEFINED CMAKE_Fortran_COMPILER_ID AND NOT DEFINED OpenMP_Fortran_FLAGS)
+        # we do this in a pedestrian way because the Fortran support is relatively recent
+        if(CMAKE_Fortran_COMPILER_ID MATCHES GNU)
+            set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fopenmp")
+        endif()
+        if(CMAKE_Fortran_COMPILER_ID MATCHES Intel)
+            if(WIN32)
+                set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -Qopenmp")
+            elseif(CMAKE_Fortran_COMPILER_ID STREQUAL "Intel" AND
+                   "${CMAKE_Fortran_COMPILER_VERSION}" VERSION_LESS "15.0.0.20140528")
+                set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -openmp")
+            else()
+                set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -qopenmp")
+            endif()
+        endif()
+        if(CMAKE_Fortran_COMPILER_ID MATCHES PGI)
+            set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -mp")
+        endif()
+        if(CMAKE_Fortran_COMPILER_ID MATCHES XL)
+            set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -qsmp")
+        endif()
+        if(CMAKE_Fortran_COMPILER_ID MATCHES Cray)
+            # do nothing in this case
+        endif()
+        set(OPENMP_FOUND TRUE)
+    endif()
+endif()
diff --git a/cmake/autocmake_safeguards.cmake b/cmake/autocmake_safeguards.cmake
new file mode 100644
index 0000000..726dbcb
--- /dev/null
+++ b/cmake/autocmake_safeguards.cmake
@@ -0,0 +1,27 @@
+# Downloaded from
+#   https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake
+# * changed text of in-source message
+
+#.rst:
+#
+# Provides safeguards against in-source builds and bad build types.
+#
+# Variables used::
+#
+#   PROJECT_SOURCE_DIR
+#   PROJECT_BINARY_DIR
+#   CMAKE_BUILD_TYPE
+
+if(${PROJECT_SOURCE_DIR} STREQUAL ${PROJECT_BINARY_DIR})
+    message(FATAL_ERROR "In-source builds not allowed. Please run CMake from top directory and specify a build directory (e.g., cmake -S. -Bbuild).")
+endif()
+
+string(TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type_tolower)
+string(TOUPPER "${CMAKE_BUILD_TYPE}" cmake_build_type_toupper)
+
+if(NOT cmake_build_type_tolower STREQUAL "debug" AND
+   NOT cmake_build_type_tolower STREQUAL "release" AND
+   NOT cmake_build_type_tolower STREQUAL "minsizerel" AND
+   NOT cmake_build_type_tolower STREQUAL "relwithdebinfo")
+    message(FATAL_ERROR "Unknown build type \"${CMAKE_BUILD_TYPE}\". Allowed values are Debug, Release, RelWithDebInfo, MinSizeRel (case-insensitive).")
+endif()
diff --git a/cmake/custom_static_library.cmake b/cmake/custom_static_library.cmake
new file mode 100644
index 0000000..d52f98b
--- /dev/null
+++ b/cmake/custom_static_library.cmake
@@ -0,0 +1,56 @@
+# Downloaded from
+#   https://github.com/PCMSolver/pcmsolver/blob/release/1.Y/cmake/custom/static_library.cmake
+# * suppressed STATIC_LIBRARY_ONLY
+# * moved option up
+# * corrected CXX block matches statements from C --> CXX compiler
+
+#.rst:
+#
+# Enables creation of static library.
+# If the shared library is created, make it as static as possible.
+#
+# Variables modified (provided the corresponding language is enabled)::
+#
+#   CMAKE_Fortran_FLAGS
+#   CMAKE_C_FLAGS
+#   CMAKE_CXX_FLAGS
+#
+# autocmake.cfg configuration::
+#
+#   docopt: --static Create only the static library [default: False].
+#   define: '-DSTATIC_LIBRARY_ONLY=%s' % arguments['--static']
+
+if(ENABLE_GENERIC)
+    if(DEFINED CMAKE_Fortran_COMPILER_ID)
+        if(CMAKE_Fortran_COMPILER_ID MATCHES GNU)
+            set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -static-libgfortran")
+        endif()
+        if(CMAKE_Fortran_COMPILER_ID MATCHES Intel)
+            set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -static-libgcc -static-intel")
+        endif()
+    endif()
+
+    if(DEFINED CMAKE_C_COMPILER_ID)
+        if(CMAKE_C_COMPILER_ID MATCHES GNU)
+            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -static-libgcc -fpic")
+        endif()
+        if(CMAKE_C_COMPILER_ID MATCHES Intel)
+            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -static-libgcc -static-intel -wd10237")
+        endif()
+        if(CMAKE_C_COMPILER_ID MATCHES Clang)
+            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fpic")
+        endif()
+    endif()
+
+    if(DEFINED CMAKE_CXX_COMPILER_ID)
+        if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc")
+        endif()
+        if(CMAKE_CXX_COMPILER_ID MATCHES Intel)
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,--as-needed -static-libstdc++ -static-libgcc -static-intel -wd10237")
+        endif()
+        if(CMAKE_CXX_COMPILER_ID MATCHES Clang)
+            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libstdc++")
+        endif()
+    endif()
+endif()
diff --git a/cmake/gdmaConfig.cmake.in b/cmake/gdmaConfig.cmake.in
new file mode 100644
index 0000000..afe2eb8
--- /dev/null
+++ b/cmake/gdmaConfig.cmake.in
@@ -0,0 +1,134 @@
+# gdmaConfig.cmake
+# -----------------
+#
+# gdma cmake module.
+# This module sets the following variables in your project::
+#
+#   gdma_FOUND - true if gdma and all required components found on the system
+#   gdma_VERSION - gdma version in format Major.Minor.Release. Prefer target variable.
+#   gdma_INCLUDE_DIRS - Directory where gdma/tensor.h header is located and dependent headers. Prefer targets.
+#   gdma_INCLUDE_DIR - same as DIRS. Prefer targets.
+#   gdma_DEFINITIONS - Definitions necessary to use gdma, namely USING_gdma. Prefer targets.
+#   gdma_LIBRARIES - gdma library to link against plus any dependent libraries. Prefer targets.
+#   gdma_LIBRARY - gdma library to link against. Prefer targets
+#   gdma_PYMOD - path to pygdma python module (suitable for appending PYTHONPATH). Only present
+#                 with Python component. Prefer pygdma target variable.
+#
+#
+# Target variables::
+#
+# It is preferred to use properties set on the base target rather than using the above variables. ::
+#
+#   gdma_VERSION - gdma version in format Major.Minor.Release
+#   gdma_PYMOD - path to gdma python module (suitable for appending PYTHONPATH). Only on pygdma target.
+#
+#   get_property(_ver TARGET gdma::gdma PROPERTY gdma_VERSION)
+#
+#
+# Available components: shared static Python ::
+#
+#   shared - search for only shared library
+#   static - search for only static library
+#   Python - search for Python bindings library
+#
+#
+# Exported targets::
+#
+# If gdma is found, this module defines at least the first following
+# :prop_tgt:`IMPORTED` target. Depending on components available, it may define::
+#
+#   gdma::gdma - the main gdma library with header & defs attached.
+#   gdma::exe - the usual gdma executable.
+#   gdma::pygdma - the Python pybind11 library.
+#
+#
+# Suggested usage::
+#
+#   find_package(gdma)
+#   find_package(gdma 2.2.3 CONFIG REQUIRED COMPONENTS shared)
+#
+#
+# The following variables can be set to guide the search for this package::
+#
+#   gdma_DIR - CMake variable, set to directory containing this Config file
+#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
+#   PATH - environment variable, set to bin directory of this package
+#   CMAKE_DISABLE_FIND_PACKAGE_gdma - CMake variable, disables
+#       find_package(gdma) perhaps to force internal build
+
+@PACKAGE_INIT@
+
+set(gdma gdma)  # NameSpace
+
+# check library style component
+if (@BUILD_SHARED_LIBS@)  # BUILD_SHARED_LIBS
+    set(${gdma}_shared_FOUND 1)
+else()
+    set(${gdma}_static_FOUND 1)
+endif()
+list(FIND ${gdma}_FIND_COMPONENTS "shared" _seek_shared)
+list(FIND ${gdma}_FIND_COMPONENTS "static" _seek_static)
+
+# check Python interface component
+if (EXISTS "${CMAKE_CURRENT_LIST_DIR}/${gdma}Targets-Python.cmake")
+    set(${gdma}_Python_FOUND 1)
+endif()
+list(FIND ${gdma}_FIND_COMPONENTS "Python" _seek_Python)
+
+# make detectable the FindTarget*.cmake modules
+list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})
+
+# Check all required components are available before trying to load any
+check_required_components(${gdma})
+
+#-----------------------------------------------------------------------------
+# Don't include targets if this file is being picked up by another
+# project which has already built this as a subproject
+#-----------------------------------------------------------------------------
+if(NOT TARGET ${gdma}::gdma)
+    include("${CMAKE_CURRENT_LIST_DIR}/${gdma}Targets-lib.cmake")
+
+    get_property(_loc TARGET ${gdma}::gdma PROPERTY LOCATION)
+    get_property(_ill TARGET ${gdma}::gdma PROPERTY INTERFACE_LINK_LIBRARIES)
+    get_property(_iid TARGET ${gdma}::gdma PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
+    get_property(_icd TARGET ${gdma}::gdma PROPERTY INTERFACE_COMPILE_DEFINITIONS)
+    set(${gdma}_LIBRARY ${_loc})
+    set(${gdma}_LIBRARIES ${_loc};${_ill})
+    set(${gdma}_INCLUDE_DIR ${_iid})
+    set(${gdma}_INCLUDE_DIRS ${_iid})
+    set(${gdma}_DEFINITIONS ${_icd})
+
+    if(${gdma}_Python_FOUND)
+        include("${CMAKE_CURRENT_LIST_DIR}/${gdma}Targets-Python.cmake")
+        get_property(${gdma}_PYMOD TARGET ${gdma}::pygdma PROPERTY gdma_PYMOD)
+    endif()
+
+    if (CMAKE_VERSION VERSION_GREATER 3.15)
+        message(VERBOSE "gdma::gdma")
+
+        get_property(_ver TARGET ${gdma}::gdma PROPERTY gdma_VERSION)
+        message(VERBOSE "${gdma}::gdma.${gdma}_VERSION   ${_ver}")
+
+        message(VERBOSE "${gdma}_FOUND                  ${${gdma}_FOUND}")
+        message(VERBOSE "${gdma}_VERSION                ${${gdma}_VERSION}")
+        message(VERBOSE "${gdma}_DEFINITIONS            ${${gdma}_DEFINITIONS}")
+
+        message(VERBOSE "${gdma}_LIBRARY                ${${gdma}_LIBRARY}")
+        message(VERBOSE "${gdma}_LIBRARIES              ${${gdma}_LIBRARIES}")
+        message(VERBOSE "${gdma}_INCLUDE_DIR            ${${gdma}_INCLUDE_DIR}")
+        message(VERBOSE "${gdma}_INCLUDE_DIRS           ${${gdma}_INCLUDE_DIRS}")
+
+        if (TARGET ${gdma}::pygdma)
+            message(VERBOSE "gdma::pygdma")
+
+            get_property(_ver TARGET ${gdma}::pygdma PROPERTY gdma_VERSION)
+            get_property(_pym TARGET ${gdma}::pygdma PROPERTY gdma_PYMOD)
+            message(VERBOSE "${gdma}::pygdma.${gdma}_VERSION ${_ver}")
+            message(VERBOSE "${gdma}::pygdma.${gdma}_PYMOD   ${_pym}")
+
+            message(VERBOSE "${gdma}_VERSION                ${${gdma}_VERSION}")
+            message(VERBOSE "${gdma}_PYMOD                  ${${gdma}_PYMOD}")
+        endif()
+    endif()
+
+endif()
diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake
new file mode 100644
index 0000000..1657978
--- /dev/null
+++ b/cmake/psi4OptionsTools.cmake
@@ -0,0 +1,156 @@
+###This file contains functions used throughout the Psi4 build.  Like source
+###code, the build system should be factored and common code extracted out into
+###functions/macros.  If you find repetitive code throughout the build scripts
+###this is the place to add it (make sure you document it too).
+
+#Macro for printing an option in a consistent manner
+#
+#Syntax: print_option(<option to print> <was specified>)
+#
+macro(print_option variable default)
+if(NOT DEFINED ${variable} OR "${${variable}}" STREQUAL "")
+    message(STATUS "Setting (unspecified) option ${variable}: ${default}")
+else()
+    message(STATUS "Setting option ${variable}: ${${variable}}")
+endif()
+endmacro()
+
+# Wraps an option with default ON/OFF. Adds nice messaging to option()
+#
+#Syntax: option_with_print(<option name> <description> <default value>)
+#
+macro(option_with_print variable msge default)
+   print_option(${variable} ${default})
+   option(${variable} ${msge} ${default})
+endmacro(option_with_print)
+
+#Wraps an option with a default other than ON/OFF and prints it
+#NOTE: Can't combine with above b/c CMake handles ON/OFF options specially
+#NOTE2: CMAKE_BUILD_TYPE (and other CMake variables) are always defined so need
+#       to further check for if they are the NULL string.  This is also why we
+#       need the force
+#
+#Syntax: option_with_default(<option name> <description> <default value>)
+#
+macro(option_with_default variable msge default)
+print_option(${variable} ${default})
+if(NOT DEFINED ${variable} OR "${${variable}}" STREQUAL "")
+   set(${variable} ${default} CACHE STRING ${msge} FORCE)
+endif()
+endmacro(option_with_default)
+
+include(CheckCCompilerFlag)
+include(CheckCXXCompilerFlag)
+if(CMAKE_Fortran_COMPILER)
+    include(CheckFortranCompilerFlag)  # CMake >= 3.3, so local copy in cmake/
+endif()
+
+#The guts of the next two functions, use the wrappers please
+#
+#Syntax: add_C_or_CXX_flags(<True for C, False for CXX>)
+#
+# Note: resist adding -Werror to the check_X_compiler_flag calls,
+#   as (i) the flag for Intel is actually -diag-error warn, (ii)
+#   Intel ifort doesn't define -Werror, and (iii) passing it
+#   changes REQUIRED_DEFINITIONS.
+macro(add_C_or_CXX_flags is_C)
+set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET})
+   set(CMAKE_REQUIRED_QUIET ON)
+   set(flags_to_try "${ARGN}")
+   foreach(flag_i IN LISTS flags_to_try ITEMS -brillig)
+      if(${flag_i} STREQUAL "-brillig")
+         message(WARNING "Option unfulfilled as none of ${flags_to_try} valid")
+         break()
+      endif()
+      unset(test_option CACHE)
+      if(${is_C} EQUAL 0)
+          CHECK_C_COMPILER_FLAG("${flag_i}" test_option)
+          set(description_to_print CMAKE_C_FLAGS)
+      elseif(${is_C} EQUAL 1)
+          CHECK_CXX_COMPILER_FLAG("${flag_i}" test_option)
+          set(description_to_print CMAKE_CXX_FLAGS)
+      elseif(${is_C} EQUAL 2)
+          CHECK_Fortran_COMPILER_FLAG("${flag_i}" test_option)
+          set(description_to_print CMAKE_Fortran_FLAGS)
+      endif()
+      set(msg_base "Performing Test ${description_to_print} [${flag_i}] -")
+      if(${test_option})
+        set(${description_to_print} "${${description_to_print}} ${flag_i}")
+        if(NOT CMAKE_REQUIRED_QUIET_SAVE)
+           message(STATUS  "${msg_base} Success, Appending")
+        endif()
+        break()
+      else()
+        if(NOT CMAKE_REQUIRED_QUIET_SAVE)
+           message(STATUS "${msg_base} Failed")
+        endif()
+      endif()
+   endforeach()
+   set(CMAKE_REQUIRED_QUIET ${CMAKE_REQUIRED_QUIET_SAVE})  
+endmacro()
+
+
+
+#Checks if C flags are valid, if so adds them to CMAKE_C_FLAGS
+#Input should be a list of flags to try.  If two flags are to be tried together
+#enclose them in quotes, e.g. "-L/path/to/dir -lmylib" is tried as a single
+#flag, whereas "-L/path/to/dir" "-lmylib" is tried as two separate flags.
+#The first list item to succeed is added to CMAKE_C_FLAGS, then try loop
+#breaks. Warning issued if no flags in list succeed.
+#
+#
+#Syntax: add_C_flags(<flags to add>)
+#
+macro(add_C_flags)
+   add_C_or_CXX_flags(0 ${ARGN})
+endmacro()
+
+#Checks if CXX flags are valid, if so adds them to CMAKE_CXX_FLAGS
+#See add_C_flags for more info on syntax
+#
+#Syntax: add_CXX_flags(<flags to add>)
+#
+macro(add_CXX_flags)
+    add_C_or_CXX_flags(1 ${ARGN})
+endmacro()
+
+#Checks if Fortran flags are valid, if so adds them to CMAKE_Fortran_FLAGS
+#See add_C_flags for more info on syntax
+#
+#Syntax: add_Fortran_flags(<flags to add>)
+#
+macro(add_Fortran_flags)
+    add_C_or_CXX_flags(2 ${ARGN})
+endmacro()
+
+#Macro for adding flags common to both C and CXX, if the compiler supports them
+#
+#Syntax: add_flags(<flags to add>)
+#
+macro(add_flags FLAGS)
+    get_property(languages GLOBAL PROPERTY ENABLED_LANGUAGES)
+    list(FIND languages "C" _index_c)
+    list(FIND languages "CXX" _index_cxx)
+    list(FIND languages "Fortran" _index_fortran)
+    if (${_index_c} GREATER -1)
+        add_C_flags(${FLAGS})
+    endif()
+    if (${_index_cxx} GREATER -1)
+        add_CXX_flags(${FLAGS})
+    endif()
+    if (${_index_fortran} GREATER -1)
+        add_Fortran_flags(${FLAGS})
+    endif()
+endmacro()
+
+#Defines an option that if enabled turns on some compiler flags
+#
+#Syntax: option_with_flags(<option> <description> <default value> <flags>)
+#
+macro(option_with_flags option msg default)
+    print_option(${option} ${default})
+    option(${option} ${msg} ${default})
+    if(${${option}})
+       add_flags("${ARGN}")
+    endif()
+endmacro()
-- 
2.40.1

