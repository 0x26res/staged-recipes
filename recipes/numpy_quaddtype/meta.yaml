{% set name = "numpy_quaddtype" %}
{% set version = "0.0.4" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://github.com/SwayamInSync/numpy-user-dtypes/archive/refs/tags/quaddtype-v{{ version }}.tar.gz
  sha256: a400f35cf980965486f9dd00c9d2289e877a4bd09a848f49b82de23e1855beea

build:
  number: 0
  skip: True  # [py<310 or py>=313]
  script: |
    cd quaddtype
    {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ stdlib("c") }}
    - python
    - pip
    - meson
    - meson-python
    - setuptools
    - sleef ==3.6.1
    - numpy >=2.0
  host:
    - python
    - pip
    - setuptools
    - meson
    - meson-python
    - sleef ==3.6.1
    - numpy >=2.0
  run:
    - python
    - {{ pin_compatible('sleef') }}
    - numpy

test:
  imports:
    - numpy_quaddtype
  requires:
    - pytest
  source_files:
    - quaddtype/tests
  commands:
    -python -c '''
import numpy as np
from numpy_quaddtype import QuadPrecision

arr1 = np.array([QuadPrecision("1.5"), QuadPrecision("2.5"), QuadPrecision("3.5")])
arr2 = np.array([QuadPrecision("0.5"), QuadPrecision("1.0"), QuadPrecision("1.5")])

result = arr1 + arr2
expected = np.array([QuadPrecision("2.0"), QuadPrecision("3.5"), QuadPrecision("5.0")])

print("Result array:", result)
print("Expected array:", expected)

for r, e in zip(result, expected):
    print(f"Result: {r}, Expected: {e}, Equal: {r == e}")
'''
    - pytest quaddtype/tests

about:
  home: https://github.com/numpy/numpy-user-dtypes
  summary: "Quad (128-bit) float dtype for numpy"
  license: BSD-3-Clause
  license_file: LICENSE

extra:
  recipe-maintainers:
    - SwayamInSync
