diff --git a/scripts/python3/compilation/compil_tools.py b/scripts/python3/compilation/compil_tools.py
index 77003e487..35fe8b2a4 100644
--- a/scripts/python3/compilation/compil_tools.py
+++ b/scripts/python3/compilation/compil_tools.py
@@ -643,16 +643,6 @@ def create_pyd_files(yname, yfile, ymdul, yprog, mes, bypass, homeres, verbose):
 
     return False
 
-def mycopy(src, dst):
-    """
-    Custom copy that will remove the destination first if it is there
-    @param src The file to copy
-    @param dst The destiantion where to copy the file
-    """
-    if path.exists(dst):
-        remove(dst)
-    shutil.copy(src, dst)
-
 def get_api_incs_flags():
     """
     Retuns the string for incs_flags for api
@@ -751,33 +741,81 @@ def compile_princi_lib(princi_file, incs_flags, ld_flags):
             'Could not compile your FORTRAN \
             (runcode='+str(code)+').\n        '+tail)
 
+def f77_to_f90(input_file, output_file):
+    """
+    Convert a fixed-format Fortran 77 file into a free-format Fortran 90 file.
+    This moves only the continuation line characters and removes the F77 style
+    indentation.
+
+    @param input_file (str) The Fortran 77 file path.
+    @param output_file (str) The Fortran 90 file path.
+    """
+    with open(input_file, 'r') as f77_file, open(output_file, 'w') as f90_file:
+        cont_char_added = False
+        for line_num, line in enumerate(f77_file):
+            # Check if the line contains a continuation character '&'
+            if line[5:6] == '&':
+                if cont_char_added == False:
+                    f90_file.write(' &')
+                else:
+                    cont_char_added = False
+
+            if line_num > 0:
+                f90_file.write('\n')
+
+            # Keep comments and preprocessor directives
+            if line[0] == '!' or line[0] == '#':
+                f90_file.write(line[:-1])
+            # Keep labels (just remove the trailing spaces after the label)
+            elif line[0].isdigit():
+                label = line[:6].rstrip()
+                instruction = line[6:-1]
+                indentation = re.match(r'^\s*', instruction).group(0)
+                f90_file.write(f'{indentation}{label} {instruction.lstrip()}')
+            # Check if the line contains a subroutine not followed by parentheses
+            # In this case, we need to add the continuation character immediately
+            # since the subroutine is sometimes followed by comments
+            elif re.search( r'^\s*SUBROUTINE\s+(\S+)\s*', line) and \
+               ')' not in line:
+                if line[6] == 'S':
+                    # Remove the first 6 columns for API subroutines
+                    f90_file.write(f'{line[6:-1]} &')
+                else:
+                    # Don't do this for usual subroutines
+                    f90_file.write(f'{line[:-1]} &')
+                cont_char_added = True
+            # Remove the first 6 columns in other cases
+            else:
+                f90_file.write(line[6:-1])
+
+        f90_file.write('\n')
+
 def copy_src_api(api_dir, src_list, src_dir):
     """
-    Copying sources in src_list from src_dir in api folder renaming them in .f90
-    And build a string containing list of names
+    Copy sources in src_list from src_dir in api folder and convert them to F90
+    Also build a string containing the list of names.
 
     @param api_dir Path to the api directory
     @param src_list List of files to copy
     @param src_dir Path of the sources
 
-    @returns String containing list of new names for f2py
+    @returns A string containing the list of new names for f2py
     """
 
     cfgname = CFGS.cfgname
     cfg = CFGS.configs[cfgname]
     lib_dir = path.join(cfg['root'], 'builds', cfgname, 'lib')
 
-    source = ''
+    sources = ''
     for src in src_list:
         root, _ = path.splitext(src)
-        # Copying source in wrap_api folder and
-        # changin extension into .f90
-        mycopy(path.join(src_dir, src), \
-            path.join(api_dir, 'src', root+'.f90'))
-        # Building list of sources
-        source += path.join(api_dir, 'src', root+'.f90') + ' '
-
-    # Copying libraries
+        # Convert sources in wrap_api folder to Fortran 90
+        f90_file = path.join(api_dir, 'src', f'{root}.f90')
+        f77_to_f90(path.join(src_dir, src), f90_file)
+        # Build list of sources
+        sources += path.join(f90_file) + ' '
+
+    # Copy libraries
     dyn_ext = cfg['sfx_lib']
     for lib in LIST_LIBS['api']:
         lib_name = lib.split('|')[-1]
@@ -789,10 +827,10 @@ def copy_src_api(api_dir, src_list, src_dir):
                 continue
         if lib == 'api':
             lib_name_tel = 'libapi'+dyn_ext
-        mycopy(path.join(lib_dir, lib_name_tel), \
-            path.join(api_dir, 'lib', lib_name_tel))
+        shutil.copy(path.join(lib_dir, lib_name_tel),
+                    path.join(api_dir, 'lib', lib_name_tel))
 
-    return source
+    return sources
 
 def generate_api():
     """
@@ -815,8 +853,8 @@ def generate_api():
     for root, _, files in walk(obj_dir):
         for ffile in files:
             if ffile.endswith("mod"):
-                mycopy(path.join(root, ffile), \
-                    path.join(api_dir, 'include', ffile))
+                shutil.copy(path.join(root, ffile),
+                            path.join(api_dir, 'include', ffile))
 
     # Copying sources for t3d, t2d, art and sis
     src_list = []
@@ -876,49 +914,56 @@ def generate_api():
 def compile_api_f2py(name, api_dir, source_list, skip_source, \
     ld_flags, f2py_name, fcompiler, compiler, silent, f2py_opt=''):
     """
-    Running f2py to generate Python wrapper
+    Run F2PY to generate a Python wrapper
 
     @param name Name of the wrapper
     @param api_dir Path to the api folder
     @param source_list List of source for the api
     @param skip_source List of function to skip
     @param ld_flags Linking flags
-    @param f2py_name Name of the f2py executable (f2py by default)
+    @param f2py_name Name of the F2PY executable (f2py by default)
     @param fcompiler Name of the fortran compiler
     @param compiler Name of the c compiler
-    @param silent If True f2py is run in silent mode and commad are not
+    @param silent If True F2PY is run in silent mode and commands are not
     displayed
-    @param f2py_opt Addtional options passed to f2py (option --opt)
+    @param f2py_opt Addtional options passed to F2PY (option --opt)
     """
-
-    # Generating Py wrapper using f2py
+    # Disable Hermes wrapping with with F2PY 1.22.x and 1.23.x
+    # See https://github.com/numpy/numpy/issues/21893
+    if name == 'hermes':
+        import numpy as np
+        numpy_version = tuple(map(int, np.__version__.split('.')[:2]))
+        if numpy_version == (1, 22) or numpy_version == (1, 23):
+            print(f'\tDue to an issue in F2PY {np.__version__}, Hermes Python '
+                  'wrapping has been disabled.\n\tTo fix this, please upgrade '
+                  'to NumPy 1.24.0 or above.\n'
+                  '\tSee https://github.com/numpy/numpy/issues/21893 for '
+                  'further information.')
+            return
+
+    # Generate Python wrapper using F2PY
     pyf_file = path.join(api_dir, 'lib', name+'.pyf')
     if path.exists(pyf_file):
         remove(pyf_file)
     if skip_source != '':
         skip_source = 'skip: ' + skip_source + ' :'
     quiet = '--quiet' if silent else ''
-    # First step of call to f2py
-    cmd = '{f2py_name} {quiet} -h {pyf_file} -m _{name} '\
-          '{source_list} {skip_source}' \
-        .format(f2py_name=f2py_name,
-                quiet=quiet,
-                pyf_file=pyf_file,
-                name=name,
-                source_list=source_list,
-                skip_source=skip_source)
+
+    # First step of call to F2PY
+    cmd = f'{f2py_name} {quiet} -h {pyf_file} -m _{name} '\
+          f'{source_list} {skip_source}'
     if not silent:
         print(cmd)
     try:
         output = check_output(cmd, shell=True, stderr=STDOUT)
     except CalledProcessError as execpt:
         raise TelemacException(\
-                'Error during first part of f2py for {} {} \n'
-                '{}'.format(name, execpt.returncode,
-                            execpt.output.decode('utf-8')))
+            f'Error during the first part of F2PY: {execpt.returncode}\n'
+            f'{execpt.output.decode("utf-8")}')
+
     if not silent:
         print(output.decode('utf-8'))
-    print("    ~> First part of f2py for {} passed".format(name))
+    print(f"        ~> First part of F2PY passed")
 
     pwd = getcwd()
     chdir(path.join(api_dir, 'lib'))
@@ -929,34 +974,26 @@ def compile_api_f2py(name, api_dir, source_list, skip_source, \
 
     f2py_build_dir = 'tmp_f2py'
 
-    # Second step of call to f2py
-    cmd = '{f2py_name} {quiet} -c {pyf_file} --fcompiler={fcompiler} '\
-          '{compile_cmd} --opt="{f2py_opt}" -I{include} {ld_flags} ' \
-          '--build-dir {build_dir}' \
-        .format(f2py_name=f2py_name,
-                pyf_file=pyf_file,
-                quiet=quiet,
-                fcompiler=fcompiler,
-                compile_cmd=compile_cmd,
-                include=path.join(api_dir, 'include'),
-                ld_flags=ld_flags,
-                f2py_opt=f2py_opt,
-                build_dir=f2py_build_dir)
+    # Second step of call to F2PY
+    cmd = f'{f2py_name} {quiet} -c {pyf_file} --fcompiler={fcompiler} '\
+          f'{compile_cmd} --opt="{f2py_opt}" -I{path.join(api_dir, "include")}'\
+          f'{ld_flags} --build-dir {f2py_build_dir}'
     if not silent:
         print(cmd)
     try:
         output = check_output(cmd, shell=True, stderr=STDOUT)
     except CalledProcessError as execpt:
         raise TelemacException(\
-                'Error during second part of f2py for {} {} \n'
-                '{}'.format(name, execpt.returncode,
-                            execpt.output.decode('utf-8')))
+            f'Error during the second part of F2PY: {execpt.returncode}\n'
+            f'{execpt.output.decode("utf-8")}')
+
     if not silent:
         print(output.decode('utf-8'))
-    # Removing build directory
+
+    # Remove the build directory
     if path.exists(f2py_build_dir):
         shutil.rmtree(f2py_build_dir)
-    print("    ~> Second part of f2py of %s passed"%name)
+    print(f"        ~> Second part of F2PY passed")
     chdir(pwd)
 
 def compile_api_files(silent, hermes_only=False):
@@ -996,16 +1033,15 @@ def compile_api_files(silent, hermes_only=False):
     f2py_opt = cfg.get("f2py_opt", '')
 
     if not hermes_only:
-        print("    ~> Compiling Modules api")
+        print("    ~> Generating the API Python wrapper")
         ld_flags = get_api_ld_flags('api')
         compile_api_f2py('api', api_dir, source_api, skip_source, ld_flags,
-                         f2py_name, fcompiler, compiler, silent,
-                         f2py_opt=f2py_opt)
+                         f2py_name, fcompiler, compiler, silent, f2py_opt)
 
-    print("    ~> Compiling hermes api")
+    print("    ~> Generating the Hermes Python wrapper")
     ld_flags = get_api_ld_flags('hermes')
-    compile_api_f2py('hermes', api_dir, source_hermes, '',
-                     ld_flags, f2py_name, fcompiler, compiler, silent)
+    compile_api_f2py('hermes', api_dir, source_hermes, '', ld_flags, f2py_name,
+                     fcompiler, compiler, silent)
 
 def update_cmdf(bypass, cleanup, verbose):
     """
diff --git a/scripts/python3/execution/get.py b/scripts/python3/execution/get.py
index 4b424191d..449089df8 100644
--- a/scripts/python3/execution/get.py
+++ b/scripts/python3/execution/get.py
@@ -189,18 +189,26 @@ def get_glogeo(cas):
     return glogeo, fmtgeo, globnd
 
 
-def get_file_format(cas, keyword):
-    """
-    Search in a cas object for the format key word
-    associated with the keyword in argument
-    """
-    # Loop on all the keywords in the cas file
-    for k in cas.values:
-        # The keyword we are searching for contains both the keyword 'keyword'
-        # and the word FORMAT (same word in french and english)
-        if keyword in k and ('FORMAT ' in k or ' FORMAT' in k):
-            return cas.values[k]
-    # By default if there is no format keyword the file is SERAFIN
+def get_file_format(cas, file_kind):
+    """
+    Get the file format corresponfing to a given file kind (geometry,
+    results...)
+
+    @param cas (TelemacCas) A steering file
+    @param file_kind (str) A file type ('GEOMETRY FILE', 'RESULTS FILE'...)
+
+    @return str The file format. Defaults to SERAFIN.
+    """
+
+    # Loop on all the keywords in the steering file
+    for keyword in cas.values:
+        # The keyword we are looking for contains both the file kind
+        # and the word FORMAT (same word in French and English)
+        if file_kind in keyword and ('FORMAT ' in keyword or
+                                     ' FORMAT' in keyword):
+            return cas.values[keyword]
+
+    # Default to SERAFIN if there is no format keyword
     return 'SERAFIN'
 
 
diff --git a/scripts/python3/telapy/api/api_module.py b/scripts/python3/telapy/api/api_module.py
index 1b6f8d6f3..491bb2589 100644
--- a/scripts/python3/telapy/api/api_module.py
+++ b/scripts/python3/telapy/api/api_module.py
@@ -17,33 +17,13 @@ from importlib import reload
 
 import numpy as np
 
+from execution.get import get_file_format
 from execution.telemac_cas import TelemacCas
 from telapy.tools.decode_range import decode_range
 from utils.exceptions import TelemacException
 from utils.polygon import is_in_polygon
 
 
-def get_file_format(key, cas):
-    """
-    Get the format of the file of keyword key
-
-    @param key Name of the keyword
-    @param cas Steering file structure
-    """
-
-    i = 0
-    # Loop on all the keywords in the cas file
-    for k in cas.values:
-        # The keyword we are searching for contains both the keyword 'keyword'
-        # and the word FORMAT (same word in french and english)
-        if key in k and ('FORMAT ' in k or ' FORMAT' in k):
-            return cas.values[k]
-        i = i + 1
-    # By default if there is no format keyword the file is SERAFIN
-
-    return 'SERAFIN'
-
-
 def get_dico(name):
     """
     Returns path to the dictionary associated with the short_name (t2d,sis...)
@@ -341,7 +321,7 @@ class ApiModule():
 
         # Partionning the geometry file first
         geo_file = cas.get('GEOMETRY FILE')
-        geo_fmt = get_file_format('GEOMETRY FILE', cas)
+        geo_fmt = self._get_file_format(cas, 'GEOMETRY FILE')
         self.logger.debug('%d: starting partel for %s', self.rank, geo_file)
         self._error = self.api_inter.run_partel(
             code, geo_file, cli_file,
@@ -356,7 +336,7 @@ class ApiModule():
                 if key == 'GEOMETRY FILE':
                     continue
                 if submit[5][0:7] == 'SELAFIN':
-                    file_fmt = get_file_format(key, cas)
+                    file_fmt = self._get_file_format(cas, key)
                     self.logger.debug('%d: starting parres for %s',
                                       self.rank, ffile)
                     self._error = self.api_inter.run_parres(
@@ -385,7 +365,7 @@ class ApiModule():
 
         # Get name of the geometry file
         geo_file = cas.get('GEOMETRY FILE')
-        geo_fmt = get_file_format('GEOMETRY FILE', cas)
+        geo_fmt = self._get_file_format(cas, 'GEOMETRY FILE')
 
         # Get the name of the boundary conditions file
         cli_file = cas.get('BOUNDARY CONDITIONS FILE')
@@ -399,7 +379,7 @@ class ApiModule():
             if ffile != '':
                 submit = cas.out_files[key].split(';')
                 if submit[5][0:7] == 'SELAFIN':
-                    file_fmt = get_file_format(key, cas)
+                    file_fmt = self._get_file_format(cas, key)
                     self.logger.debug('%d: starting gretel for %s',
                                       self.rank, ffile)
                     part_file = ffile+'{0:05d}-{1:05d}'.format(self.ncsize-1,
@@ -1615,3 +1595,18 @@ class ApiModule():
         lvalues[:] = values[self._knolg[:npoin]]
 
         self.set_array(varname, lvalues)
+
+    def _get_file_format(self, cas, file_kind):
+        """
+        Get the file format corresponfing to a given file kind (geometry,
+        results...). The result is an numpy array containing an 8 character
+        byte string, suitable to be passed to FORTRAN subroutines expecting
+        an intent(inout) argument.
+
+        @param cas (TelemacCas) A steering file
+        @param file_kind (str) A file type ('GEOMETRY FILE', 'RESULTS FILE'...)
+
+        @return numpy.ndarray The file format. Defaults to SERAFIN.
+        """
+        format = get_file_format(cas, file_kind).encode('utf-8').ljust(8, b'\0')
+        return np.array(format)
\ No newline at end of file
diff --git a/scripts/python3/telapy/api/hermes.py b/scripts/python3/telapy/api/hermes.py
index dd42a9840..6fc7d7d2a 100644
--- a/scripts/python3/telapy/api/hermes.py
+++ b/scripts/python3/telapy/api/hermes.py
@@ -102,7 +102,7 @@ class HermesFile():
         logging.basicConfig(level=i_log)
         self.logger.setLevel(i_log)
 
-        self._fformat = fformat.encode('utf-8') + b' '*(8 - len(fformat))
+        self._fformat = fformat.ljust(8).encode('utf-8')
         self.file_name = file_name
         self.boundary_file = boundary_file
 
@@ -148,7 +148,7 @@ class HermesFile():
                           self._fformat,
                           self.openmode)
         self.my_id, self.error = \
-            HermesFile._hermes.open_mesh(self._fformat,
+            HermesFile._hermes.open_mesh(np.array(self._fformat),
                                          self.file_name,
                                          self.openmode)
         if fformat in ['SERAFIN', 'SERAFIND']:
@@ -263,7 +263,7 @@ class HermesFile():
         title, self.error = HermesFile._hermes.get_mesh_title(self._fformat,
                                                               self.my_id)
 
-        return title.decode('utf-8')
+        return title.ljust(80).decode('utf-8')
 
     def get_mesh_date(self):
         """
@@ -708,21 +708,22 @@ class HermesFile():
         @param var_name Name for each variable
         @param var_unit Unit for each variable
         """
-        if len(title) > 80:
-            tmp_title = title[:80].encode('utf-8')
+        mesh_title = title[:80].ljust(80).encode('utf-8')
+
+        numpy_version = tuple(map(int, np.__version__.split('.')[:3]))
+        vars = None
+        if numpy_version < (1, 22, 0):
+            vars = ''
+            for var, unit in zip(var_name, var_unit):
+                vars += f'{var.ljust(16)}{unit.ljust(16)}'
         else:
-            tmp_title = title.encode('utf-8') + b' '*(80-len(title))
-        tmp_var_name = [b' ']*32*nvar
-        for i, (var, unit) in enumerate(zip(var_name, var_unit)):
-            for j, varj in enumerate(var):
-                tmp_var_name[i*32+j] = varj.encode('utf-8')
-            for j, unitj in enumerate(unit):
-                tmp_var_name[i*32+16+j] = unitj.encode('utf-8')
+            vars = []
+            for var, unit in zip(var_name, var_unit):
+                vars.append(f'{var.ljust(16)}{unit.ljust(16)}')
 
         self.logger.debug("Writing header information")
-        self.error = HermesFile._hermes.set_header(
-            self._fformat, self.my_id,
-            tmp_title, tmp_var_name, nvar)
+        self.error = HermesFile._hermes.set_header(self._fformat, self.my_id,
+                                                   mesh_title, vars, nvar)
 
     def set_mesh(self, mesh_dim, typ_elem, ndp, nptfr, nptir, nelem, npoin,
                  ikles, ipobo, knolg, coordx, coordy, nplan, date,
@@ -949,7 +950,7 @@ class HermesFile():
         string += 'Generic info' + '\n'
         string += '*'*32 + '\n'
 
-        string += "Title: %s\n" % self.get_mesh_title()[1:72]
+        string += "Title: %s\n" % self.get_mesh_title()[0:72]
         date = self.get_mesh_date()
         string += "Date: %d/%d/%d %dH%dM%dS\n" % (date[2], date[1], date[0],
                                                   date[3], date[4], date[5])
diff --git a/sources/api/api.cmdf b/sources/api/api.cmdf
index 973841949..52ec14bc1 100644
--- a/sources/api/api.cmdf
+++ b/sources/api/api.cmdf
@@ -69,7 +69,6 @@ files: api_handle_error.f
   api_run_t3d.f
   api_run_wac.f
   api_interface.f
-  example_cpl_t2d_sis.f
   homere_api.F
 
 [artemis]
diff --git a/sources/api/api_interface.f b/sources/api/api_interface.f
index 0732eba8b..ecc2647d1 100644
--- a/sources/api/api_interface.f
+++ b/sources/api/api_interface.f
@@ -759,20 +759,21 @@
       !!                        error id otherwise
       !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       SUBROUTINE SET_STRING(ID, TAG, VARNAME, VALEUR,
-     &             VALUELEN, INDEX1, INDEX2, IERR)
+     &                      INDEX1, INDEX2, IERR)
 !
         INTEGER,               INTENT(IN) :: ID
-        CHARACTER(LEN=3),           INTENT(IN)    :: TAG
+        CHARACTER(LEN=3),           INTENT(IN)  :: TAG
         CHARACTER(LEN=T2D_VAR_LEN), INTENT(IN)  :: VARNAME
-        INTEGER,               INTENT(IN) :: VALUELEN
+        INTEGER                :: VALUELEN
         INTEGER,               INTENT(IN) :: INDEX1
         INTEGER,               INTENT(IN) :: INDEX2
-        CHARACTER,             INTENT(IN) :: VALEUR(VALUELEN)
+        CHARACTER(*),          INTENT(IN) :: VALEUR
         INTEGER,               INTENT(OUT) :: IERR
 !
         CALL CHECK_INSTANCE(ID,TAG,IERR)
         IF(IERR.NE.0) RETURN
-!
+
+        VALUELEN = LEN(VALEUR)
         IF (TAG == 'T2D') THEN
           CALL SET_STRING_T2D_D(INSTANCE_LIST_T2D(ID), VARNAME, VALEUR,
      &                          VALUELEN, INDEX1, INDEX2, IERR)
diff --git a/sources/api/example_cpl_t2d_sis.f b/sources/api/example_cpl_t2d_sis.f
deleted file mode 100644
index 9dd2a4141..000000000
--- a/sources/api/example_cpl_t2d_sis.f
+++ /dev/null
@@ -1,226 +0,0 @@
-      SUBROUTINE EXAMPLE_CPL_T2D_SIS()
-      USE API_INTERFACE, EX_LU => LU
-      USE API_INSTANCE_SIS
-      USE API_INSTANCE_T2D
-      USE DECLARATIONS_PARTEL, ONLY : CODE
-      USE DECLARATIONS_SPECIAL, ONLY : PATH_LEN
-!
-#if defined HAVE_MPI
-!
-#  if defined HAVE_MPI_MOD
-        USE MPI
-        IMPLICIT NONE
-#  else
-        IMPLICIT NONE
-        INCLUDE 'mpif.h'
-#  endif
-#endif
-        INTEGER ::  I, IERR, ID_SIS, ID_T2D, IDUM, IDUM1
-        INTEGER :: CPL_PERIOD
-        INTEGER :: NTIME_STEPS_T2D
-        CHARACTER(LEN=PATH_LEN) :: GEO_FILE,PRE_FILE
-        CHARACTER(LEN=PATH_LEN) :: REF_FILE_T2D, REF_FILE_SIS
-        CHARACTER(LEN=PATH_LEN) :: CLI_FILE_T2D, CLI_FILE_SIS
-        CHARACTER(LEN=PATH_LEN) :: RES_FILE_T2D, RES_FILE_SIS
-        CHARACTER(LEN=PATH_LEN) :: CAS_FILE_T2D, DICO_FILE_T2D
-        CHARACTER(LEN=PATH_LEN) :: CAS_FILE_SIS, DICO_FILE_SIS
-        CHARACTER(LEN=PATH_LEN) :: DUMMY
-        CHARACTER(LEN=SIS_VAR_LEN) :: VARNAME
-        INTEGER LU,LNG,NPLAN,PARALLEL,REFFILE,PREFILE
-        INTEGER RANK,NCSIZE,PMETHOD,VAR_SIZE,COMM
-        DUMMY = ' '
-        COMM = 0
-
-!     OUTPUT FOR WRITING
-        LU=6
-        ! 1 FOR FRENCH 2 FOR ENGLISH
-        LNG=2
-        ID_SIS = 0
-        ID_T2D = 0
-        !READING THE FILES NAMES
-        OPEN(UNIT=12,FILE='param_api')
-        READ(12,'(A)') DICO_FILE_T2D
-        READ(12,'(A)') DICO_FILE_SIS
-        READ(12,*) CAS_FILE_T2D
-        READ(12,*) CAS_FILE_SIS
-        READ(12,*) CPL_PERIOD
-        READ(12,*) RES_FILE_T2D
-        READ(12,*) RES_FILE_SIS
-        READ(12,*) GEO_FILE
-        READ(12,*) CLI_FILE_T2D
-        READ(12,*) CLI_FILE_SIS
-        READ(12,*) REFFILE
-        IF (REFFILE.EQ.1) THEN
-          READ(12,*) REF_FILE_T2D
-          READ(12,*) REF_FILE_SIS
-        ELSE
-          READ(12,*)
-          READ(12,*)
-        ENDIF
-        READ(12,*) PREFILE
-        IF (PREFILE.EQ.1) THEN
-          READ(12,*) PRE_FILE
-        ELSE
-          READ(12,*)
-        ENDIF
-        READ(12,*) PARALLEL
-        CLOSE(12)
-
-        PRINT*, "DICO T2D : ",DICO_FILE_T2D
-        PRINT*, "DICO SIS : ",DICO_FILE_SIS
-        PRINT*, "CAS  T2D : ",CAS_FILE_T2D
-        PRINT*, "CAS  SIS : ",CAS_FILE_SIS
-        PRINT*, "COUPLING PERIOD  : ", CPL_PERIOD
-        PRINT*, "RES  T2D : ",RES_FILE_T2D
-        PRINT*, "RES  SIS : ",RES_FILE_SIS
-        PRINT*, "GEO  : ",GEO_FILE
-        PRINT*, "CLI  T2D : ",CLI_FILE_T2D
-        PRINT*, "CLI  SIS : ",CLI_FILE_SIS
-        IF(REFFILE.EQ.1) PRINT*,"REFERENCE FILES PRESENT : ",
-     &                           REF_FILE_T2D, REF_FILE_SIS
-        IF(PREFILE.EQ.1) PRINT*,"PREVIOUS CALCULATIONS FILE PRESENT : ",
-     &                                                         PRE_FILE
-        IF(PARALLEL.EQ.0) PRINT*,"MPI : SEQUENTIAL RUN"
-        IF(PARALLEL.EQ.1) PRINT*,"MPI : PARALLEL RUN"
-        PRINT*
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-        IF(PARALLEL.EQ.1) THEN
-          ! Partitioning method to use 1: metis
-          PMETHOD=1
-#if defined HAVE_MPI
-          ! Initialising mpi
-!! COMPAD-DCO-MPICHECK  BEGIN  JR2016
-#  if defined COMPAD
-          WRITE(LU,*) '(AD) COMPAD :: HOMERE_API.F : DIRECT CALL OF ',
-     &         'MPI_INIT NOT AD-READY'
-          WRITE(LU,*) '  PLEASE CONTACT JR @ ADJOINTWARE'
-          CALL PLANTE(1)
-          STOP
-#  endif
-!! COMPAD-DCO-MPICHECK  END  JR2016
-          CALL MPI_INIT(IERR)
-          ! Getting rank
-          CALL MPI_COMM_RANK(MPI_COMM_WORLD,RANK,IERR)
-          ! Getting the number of process
-          CALL MPI_COMM_SIZE(MPI_COMM_WORLD,NCSIZE,IERR)
-          COMM = MPI_COMM_WORLD
-#else
-        RANK = -1
-#endif
-!
-          CODE = 'SIS'
-          ! The partitioning is done sequentially
-          IF(RANK.EQ.0) THEN
-            ! PARITIONING THE GEOMETRY FILE
-            CALL PARTEL(GEO_FILE,CLI_FILE_SIS,NCSIZE,PMETHOD,
-     &                  'SERAFIN ',' ',' ')
-            IF(REFFILE.EQ.1)   CALL PARRES(GEO_FILE,REF_FILE_SIS,
-     &                  NCSIZE,'SERAFIN ','SERAFIN ')
-          ENDIF
-          CODE = 'T2D'
-          ! The partitioning is done sequentially
-          IF(RANK.EQ.0) THEN
-            ! PARITIONING THE GEOMETRY FILE
-            CALL PARTEL(GEO_FILE,CLI_FILE_T2D,NCSIZE,PMETHOD,
-     &                  'SERAFIN ',' ',' ')
-            IF(REFFILE.EQ.1)   CALL PARRES(GEO_FILE,REF_FILE_T2D,
-     &                  NCSIZE,'SERAFIN ','SERAFIN ')
-            IF(PREFILE.EQ.1)   CALL PARRES(GEO_FILE,PRE_FILE,
-     &                  NCSIZE,'SERAFIN ','SERAFIN ')
-          ENDIF
-        ENDIF
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!TELEMAC 2D!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-        CALL RUN_SET_CONFIG_T2D(ID_T2D,LU,LNG,COMM,IERR)
-
-        CALL RUN_READ_CASE_T2D(ID_T2D,CAS_FILE_T2D,DICO_FILE_T2D,
-     &                         .TRUE.,IERR,DUMMY,DUMMY)
-
-        ! Changing the name of the result file
-        VARNAME = 'MODEL.RESULTFILE'
-        CALL GET_VAR_SIZE(ID_T2D,'T2D',VARNAME,VAR_SIZE,
-     &                        IDUM,IDUM1,IERR)
-        PRINT *, 'rank:',RANK,'VAR_SIZE:',VAR_SIZE
-        CALL SET_STRING(ID_T2D,'T2D',VARNAME,RES_FILE_T2D,VAR_SIZE,
-     &                      0,0,IERR)
-
-        CALL RUN_ALLOCATION_T2D(ID_T2D,IERR)
-!
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!SISYPHE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-        CALL RUN_SET_CONFIG_SIS(ID_SIS,LU,LNG,COMM,IERR)
-
-        CALL RUN_READ_CASE_SIS(ID_SIS,'TELEMAC2D               ',
-     &                         CAS_FILE_SIS,DICO_FILE_SIS,
-     &                         .FALSE.,IERR)
-
-        ! Changing the name of the result file
-        VARNAME = 'MODEL.RESULTFILE'
-        CALL GET_VAR_SIZE(ID_SIS,'SIS',VARNAME,VAR_SIZE,IDUM,IDUM1,IERR)
-        PRINT *, 'rank:',RANK,'VAR_SIZE:',VAR_SIZE
-        CALL SET_STRING(ID_SIS,'SIS',VARNAME,RES_FILE_SIS,VAR_SIZE,
-     &                      0,0,IERR)
-
-        CALL RUN_ALLOCATION_SIS(ID_SIS,IERR)
-!
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!TIME LOOP!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-        CALL RUN_INIT_T2D(ID_T2D,IERR)
-        VARNAME = 'MODEL.CPL_PERIOD'
-        CALL SET_INTEGER(ID_T2D, 'T2D', VARNAME, CPL_PERIOD,
-     &                       0, 0, 0, IERR)
-        CALL CPL_INIT(ID_T2D,IERR)
-        CALL SET_VAR_SIS(ID_T2D, ID_SIS, 0, IERR)
-        CALL RUN_INIT_SIS(ID_SIS,IERR)
-        CALL SET_VAR_T2D(ID_T2D, ID_SIS, IERR)
-        CALL SAVE_CHARR_SUSP(ID_T2D, ID_SIS, IERR)
-
-        !Get the number of timesteps
-        VARNAME = 'MODEL.NTIMESTEPS'
-        CALL GET_INTEGER(ID_T2D, 'T2D', VARNAME, NTIME_STEPS_T2D,
-     &                       0, 0, 0, IERR)
-
-        !Get the coupling period
-        VARNAME = 'MODEL.CPL_PERIOD'
-        CALL GET_INTEGER(ID_T2D,'T2D',VARNAME,CPL_PERIOD, 0, 0, 0, IERR)
-
-        DO I=1,NTIME_STEPS_T2D
-          CALL RUN_TIMESTEP_COMPUTE_T2D(ID_T2D,IERR)
-          !COUPLAGE
-          IF(CPL_PERIOD*(I/CPL_PERIOD).EQ.I) THEN
-            CALL RUN_TIMESTEP_SIS_CPL(ID_T2D, ID_SIS, IERR)
-          ENDIF
-          CALL RUN_TIMESTEP_RES_T2D(ID_T2D,IERR)
-        ENDDO
-!
-
-
-!!!!!!!!!!!!!!!!!!!!!!!!!!!FINALISATION!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-        CALL RUN_FINALIZE_T2D(ID_T2D,IERR)
-        CALL RUN_FINALIZE_SIS(ID_SIS,IERR)
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-        IF(PARALLEL.EQ.1) THEN
-!         Mergin step
-          IF(RANK.EQ.0) THEN
-            CALL GRETEL_AUTOP(GEO_FILE,'SERAFIN ',RES_FILE_T2D,
-     &                        'SERAFIN ', NCSIZE,NPLAN)
-            CALL GRETEL_AUTOP(GEO_FILE,'SERAFIN ',RES_FILE_SIS,
-     &                        'SERAFIN ', NCSIZE,NPLAN)
-
-          ENDIF
-#if defined HAVE_MPI
-#  if defined COMPAD
-          WRITE(LU,*) '(AD) COMPAD :: HOMERE_API.F : DIRECT CALL OF ',
-     &         'MPI_FINALIZE NOT AD-READY'
-          WRITE(LU,*) '  PLEASE CONTACT JR @ ADJOINTWARE'
-          CALL PLANTE(1)
-          STOP
-#  endif
-          CALL MPI_FINALIZE(IERR)
-#endif
-        ENDIF
-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-        END SUBROUTINE EXAMPLE_CPL_T2D_SIS
