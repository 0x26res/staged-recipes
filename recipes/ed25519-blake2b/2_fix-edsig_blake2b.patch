--- a/ed25519-blake2b/bin/edsig_blake2b	2024-02-10 11:45:57.286921697 -0600
+++ b/ed25519-blake2b/bin/edsig_blake2b	2024-02-10 11:45:29.150649484 -0600
@@ -2,28 +2,28 @@
 from __future__ import print_function

 import os, sys
-import ed25519
+import ed25519_blake2b
 from hashlib import sha256

 def help():
     print("""\
-Usage: (ed25519 version %s)
+Usage: (ed25519_blake2b version %s)

- edsig generate [STEM]
+ edsig_blake2b generate [STEM]
    creates keypair, writes to 'STEM.signing.key' and 'STEM.verifying.key'
    default is to 'signing.key' and 'verifying.key'

- edsig sign (signing.key|keyfile) message.file
+ edsig_blake2b sign (signing.key|keyfile) message.file
    prints signature to stdout
    If message.file is "-", reads from stdin.

- edsig verify (verifying.key|keyfile) message.file (signature|sigfile)
+ edsig_blake2b verify (verifying.key|keyfile) message.file (signature|sigfile)
    prints 'good signature!' or raises exception
    If message.file is "-", reads from stdin.

 Key-providing arguments can either be the key itself, or point to a file
 containing the key.
-""" % ed25519.__version__)
+""" % ed25519_blake2b.__version__)

 def remove_prefix(prefix, s):
     if not s.startswith(prefix):
@@ -57,7 +57,7 @@
 if len(sys.argv) < 2:
     help()
 elif sys.argv[1] == "generate":
-    sk,vk = ed25519.create_keypair()
+    sk,vk = ed25519_blake2b.create_keypair()
     if len(sys.argv) > 2:
         sk_outfile = sys.argv[2]+".signing.key"
         vk_outfile = sys.argv[2]+".verifying.key"
@@ -73,7 +73,7 @@
 elif sys.argv[1] == "sign":
     sk_arg = sys.argv[2]
     msg_arg = sys.argv[3]
-    sk = ed25519.SigningKey(data_from_arg(sk_arg, "sign0-", 52, False),
+    sk = ed25519_blake2b.SigningKey(data_from_arg(sk_arg, "sign0-", 52, False),
                             prefix="sign0-")
     sig = sk.sign(message_rep(msg_arg), prefix="sig0-", encoding="base32")
     print(sig)
@@ -81,7 +81,7 @@
     vk_arg = sys.argv[2]
     msg_arg = sys.argv[3]
     sig_arg = sys.argv[4]
-    vk = ed25519.VerifyingKey(data_from_arg(vk_arg, "verf0-", 52, True),
+    vk = ed25519_blake2b.VerifyingKey(data_from_arg(vk_arg, "verf0-", 52, True),
                               prefix="verf0-", encoding="base32")
     sig = data_from_arg(sig_arg, "sig0-", 103, True)
     vk.verify(sig, message_rep(msg_arg),
