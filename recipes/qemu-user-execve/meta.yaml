{% set name = "qemu-execve" %}
{% set version = "9.1.0" %}

{% set qemu_bins = [
  "trace-events-all",
  "bios.bin", "bios-256k.bin", "bios-microvm.bin", "qboot.rom", "vgabios.bin", "vgabios-cirrus.bin",
  "vgabios-stdvga.bin", "vgabios-vmware.bin", "vgabios-qxl.bin", "vgabios-virtio.bin", "vgabios-ramfb.bin",
  "vgabios-bochs-display.bin", "vgabios-ati.bin", "openbios-sparc32", "openbios-sparc64", "openbios-ppc",
  "QEMU,tcx.bin", "QEMU,cgthree.bin", "pxe-e1000.rom", "pxe-eepro100.rom", "pxe-ne2k_pci.rom", "pxe-pcnet.rom",
  "pxe-rtl8139.rom", "pxe-virtio.rom", "efi-e1000.rom", "efi-eepro100.rom", "efi-ne2k_pci.rom", "efi-pcnet.rom",
  "efi-rtl8139.rom", "efi-virtio.rom", "efi-e1000e.rom", "efi-vmxnet3.rom", "qemu-nsis.bmp", "multiboot.bin",
  "multiboot_dma.bin", "linuxboot.bin", "linuxboot_dma.bin", "kvmvapic.bin", "pvh.bin", "s390-ccw.img",
  "s390-netboot.img", "slof.bin", "skiboot.lid", "palcode-clipper", "u-boot.e500", "u-boot-sam460-20100605.bin",
  "qemu_vga.ndrv", "edk2-licenses.txt", "hppa-firmware.img", "hppa-firmware64.img",
  "opensbi-riscv32-generic-fw_dynamic.bin", "opensbi-riscv64-generic-fw_dynamic.bin", "npcm7xx_bootrom.bin",
  "vof.bin", "vof-nvram.bin", "bamboo.dtb", "canyonlands.dtb", "petalogix-s3adsp1800.dtb", "petalogix-ml605.dtb",
  ]
%}
{% set qemu_keymaps = [
  "ar", "bepo", "cz", "da", "de", "de-ch", "en-gb", "en-us", "es", "et", "fi", "fo", "fr", "fr-be", "fr-ca",
  "fr-ch", "hr", "hu", "is", "it", "ja", "lt", "lv", "mk", "nl", "no", "pl", "pt", "pt-br", "ru", "th", "tr"
  ]
%}

package:
  name: qemu-execve-split
  version: {{ version }}

source:
  url: https://gitlab.com/qemu-project/qemu/-/archive/v9.1.0/qemu-v{{ version }}.tar.gz
  sha256: 7a0d0e6b7e955d03c0d418025d8551146dbd4ec0128c1fb7dec791b94de7bbb7
  patches:
    - patches/0001-intercept-qexecve.patch
    - patches/0002-execve-syscall.patch
    - patches/0003-set-qemu-name.patch
  folder: qemu-source

build:
  number: 0
  skip: True  # [not (linux and x86_64)]
  script:
    - ${RECIPE_DIR}/helpers/build-install.sh
  script_env:
    - CONDA_QEMU_USER_ARCHS={{ emulated_targets }}
    - CONDA_QEMU_INSTALL_DIR="${PREFIX}"

requirements:
  build:
    - {{ compiler('c') }}
    - {{ stdlib('c') }}
    - autoconf
    - automake
    - git
    - libtool
    - make
    - ninja
    - pkg-config
  host:
    - libcapstone
    - glib
    - libseccomp
    - meson >=1.1.0
    - sphinx >=3.4.3
    - sphinx-rtd-theme >=0.5
    - zlib

outputs:
  - name: qemu-shared-resources
    files:
      - include/qemu-plugin.h
      - share/qemu/trace-events-all

      {% for bin in qemu_bins %}
      - share/qemu/{{ bin }}
      {% endfor %}

      {% for keymap in qemu_keymaps %}
      - share/qemu/keymaps/{{ keymap }}
      {% endfor %}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
      host:
      run:
    test:
      commands:
        # no plugins - test -f ${PREFIX}/include/qemu-plugin.h
        - test -f ${PREFIX}/share/qemu/trace-events-all

        {% for bin in qemu_bins %}
        - test -f ${PREFIX}/share/qemu/{{ bin }}
        {% endfor %}

        {% for keymap in qemu_keymaps %}
        - test -f ${PREFIX}/share/qemu/keymaps/{{ keymap }}
        {% endfor %}


  - name: qemu-execve-{{ target_emulated_platform }}
    files:
      - bin/qemu-execve-{{ target_emulated_platform }}
      - etc/conda/activate.d/qemu-execve-{{ target_emulated_platform }}-activate.sh
      - etc/conda/deactivate.d/qemu-execve-{{ target_emulated_platform }}-deactivate.sh
    requirements:
      build:
        - {{ stdlib('c') }}
      host:
        - {{ pin_subpackage('qemu-shared-resources', exact=True) }}
        - libcapstone
        - glib
        {% if target_emulated_platform == "aarch64" %}
        - zlib
        {% endif %}
      run:
        - {{ emulated_c_stdlib }}_linux-{{ target_emulated_platform }} {{ emulated_c_stdlib_version }}.*
    test:
      commands:
        - test -f ${PREFIX}/bin/qemu-execve-{{ target_emulated_platform }}
        - test -f ${PREFIX}/etc/conda/activate.d/qemu-execve-{{ target_emulated_platform }}-activate.sh
        - test -f ${PREFIX}/etc/conda/deactivate.d/qemu-execve-{{ target_emulated_platform }}-deactivate.sh
        - test -f ${QEMU_LD_PREFIX}/lib/ld-{{ emulated_c_stdlib_version }}.so
        - qemu-execve-{{ target_emulated_platform }} -h
        # Test the normal execution of a cross-compiled binary
        - {{ target_emulated_gcc }} -Wl,-rpath,${QEMU_LD_PREFIX}/lib -Wl,-rpath,${QEMU_LD_PREFIX}/lib64 -L$QEMU_LD_PREFIX/lib64:$QEMU_LD_PREFIX/lib -Wl,--dynamic-linker=$QEMU_LD_PREFIX/lib/ld-{{ emulated_c_stdlib_version }}.so -o hello_from tests/hello_from.c
        - qemu-execve-{{ target_emulated_platform }} ./hello_from {{ target_emulated_platform }} > hello.txt
        - grep "Hello, I'm executing {{ target_emulated_platform }} instructions!" hello.txt
        # Test the typical execve() execution of a non-cross-compiled binary (x86_64)
        - {{ target_emulated_gcc }} -Wl,-rpath,${QEMU_LD_PREFIX}/lib -Wl,-rpath,${QEMU_LD_PREFIX}/lib64 -L$QEMU_LD_PREFIX/lib64:$QEMU_LD_PREFIX/lib -Wl,--dynamic-linker=$QEMU_LD_PREFIX/lib/ld-{{ emulated_c_stdlib_version }}.so -o execve_call tests/execve_call.c
        - qemu-execve-{{ target_emulated_platform }} ./execve_call "/bin/ls" > ls_x86_64.txt 2>&1 || true
        - grep "hello_from" ls_x86_64.txt
        # Test redirected execve() execution of a non-cross-compiled binary (x86_64) - Must fail with 'Invalid ELF image'
        - QEMU_EXECVE=${PREFIX}/bin/qemu-execve-{{ target_emulated_platform }} qemu-execve-{{ target_emulated_platform }} ./execve_call "/bin/ls" > ls_{{ target_emulated_platform }}.txt 2>&1 || true
        - grep "Invalid ELF image" ls_{{ target_emulated_platform }}.txt || exit 1
        # Test redirected execve() execution of a cross-compiled binary - Redirected to qemu which executes the binary
        - QEMU_EXECVE=${PREFIX}/bin/qemu-execve-{{ target_emulated_platform }} qemu-execve-{{ target_emulated_platform }} ./execve_call "./hello_from" "EXECVE" > execve_call.txt 2>&1 || true
        - grep "EXECVE" execve_call.txt || exit 1
      requires:
        - gcc_impl_linux-{{ target_emulated_platform }}
        - sysroot_linux-{{ target_emulated_platform }} {{ emulated_c_stdlib_version }}.*
      files:
        - tests/hello_from.c
        - tests/execve_call.c


about:
  home: https://gitlab.com/qemu-project/qemu
  summary: 'QEMU is a generic and open source machine & userspace emulator and virtualizer.'
  description: |
    Patched QEMU to intercept and log execve calls.
  license: GPL-2.0-only
  license_file: qemu-source/LICENSE
  doc_url: https://www.qemu.org/documentation/

extra:
  recipe-maintainers:
    - MementoRC
  feedstock-name: qemu-execve
