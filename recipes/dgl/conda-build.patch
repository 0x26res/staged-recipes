diff --git a/CMakeLists.txt b/CMakeLists.txt
index 96adfd2b..e3387e0a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -37,6 +37,27 @@ dgl_option(BUILD_TORCH "Build the PyTorch plugin" OFF)
 dgl_option(BUILD_SPARSE "Build DGL sparse library" ON)
 dgl_option(TORCH_PYTHON_INTERPS "Python interpreter used to build tensoradapter and DGL sparse library" python3)
 
+
+dgl_option(EXTERNAL_DLPACK_PATH "Path to external dlpack" OFF)
+dgl_option(EXTERNAL_DMLC_PATH "Path to external dmlc-core" OFF)
+dgl_option(EXTERNAL_DMLC_LIB_PATH "Path to external dmlc-core library" OFF)
+dgl_option(EXTERNAL_PHMAP_PATH "Path to external parallel-hashmap" OFF)
+dgl_option(EXTERNAL_NANOFLANN_PATH "Path to use external nanoflann" OFF)
+dgl_option(EXTERNAL_PCG_PATH "Path to use external pcg" OFF)
+dgl_option(EXTERNAL_METIS_PATH "Path to external metis" OFF)
+dgl_option(EXTERNAL_GKLIB_PATH "Path to external gklib" OFF)
+
+if (EXTERNAL_DLPACK_PATH OR EXTERNAL_DMLC_PATH OR EXTERNAL_NANOFLANN_PATH OR EXTERNAL_PCG_PATH OR EXTERNAL_METIS_PATH OR EXTERNAL_METIS_PATH OR EXTERNAL_GKLIB_PATH)
+  message(STATUS "Using at least one external library")
+  set(USE_EXTERNAL_LIBS ON)
+  
+  if (BUILD_CPP_TEST)
+    message(FATAL_ERROR "Cannot build cpp unittests with external libraries")
+  endif(BUILD_CPP_TEST)
+
+endif()
+
+
 # Set debug compile option for gdb, only happens when -DCMAKE_BUILD_TYPE=DEBUG
 if (NOT MSVC)
   set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG -O0 -g3 -ggdb")
@@ -172,52 +193,144 @@ set_property(TARGET dgl PROPERTY CXX_STANDARD 14)
 
 # include directories
 target_include_directories(dgl PRIVATE "include")
-target_include_directories(dgl PRIVATE "third_party/dlpack/include")
-target_include_directories(dgl PRIVATE "third_party/dmlc-core/include")
-target_include_directories(dgl PRIVATE "third_party/phmap/")
-target_include_directories(dgl PRIVATE "third_party/xbyak/")
-target_include_directories(dgl PRIVATE "third_party/METIS/include/")
-target_include_directories(dgl PRIVATE "tensoradapter/include")
-target_include_directories(dgl PRIVATE "third_party/nanoflann/include")
-target_include_directories(dgl PRIVATE "third_party/libxsmm/include")
-target_include_directories(dgl PRIVATE "third_party/pcg/include")
 
-# For serialization
-if (USE_HDFS)
-  option(DMLC_HDFS_SHARED "dgl has to build with dynamic hdfs library" ON)
+
+# check for conda includes
+if("$ENV{CONDA_BUILD}" STREQUAL "1")
+  set(in_conda_build TRUE)
+  message(STATUS "Conda build environment detected")
+elseif(DEFINED ENV{CONDA_PREFIX})
+  set(in_conda_prefix TRUE)
+  message(STATUS "Conda environment detected: $ENV{CONDA_PREFIX}")
 endif()
-add_subdirectory("third_party/dmlc-core")
-list(APPEND DGL_LINKER_LIBS dmlc)
-set(GOOGLE_TEST 0) # Turn off dmlc-core test
 
-# Compile METIS
-if(NOT MSVC)
-  set(GKLIB_PATH "${CMAKE_CURRENT_SOURCE_DIR}/third_party/METIS/GKlib")
-  include(${GKLIB_PATH}/GKlibSystem.cmake)
-  include_directories(${GKLIB_PATH})
-  include_directories("third_party/METIS/include/")
-  add_subdirectory("third_party/METIS/libmetis/")
-  list(APPEND DGL_LINKER_LIBS metis)
-endif(NOT MSVC)
+if (USE_CONDA_INCLUDES)
+  if(in_conda_build)
+    message(STATUS "Using Conda build environment includes: $ENV{PREFIX}")
+    target_include_directories(dgl PRIVATE "$ENV{PREFIX}/include" "$ENV{BUILD_PREFIX}/include")
+  elseif(in_conda_prefix)
+    message(STATUS "Using Conda environment includes: $ENV{CONDA_PREFIX}")
+    target_include_directories(dgl PRIVATE "$ENV{CONDA_PREFIX}/include")
+  else()
+    message(FATAL_ERROR "Conda environment not detected")
+  endif()
+endif()
 
-# Compile LIBXSMM
-if((NOT MSVC) AND USE_LIBXSMM)
-  set(LIBXSMM_COMPILER "${CMAKE_C_COMPILER}")
-  if (APPLE)
-    set(LIBXSMM_COMPILER "${CMAKE_C_COMPILER} -isysroot ${CMAKE_OSX_SYSROOT}")
+if(EXTERNAL_DLPACK_PATH)
+  message(STATUS "looking for dlpack headers in ${EXTERNAL_DLPACK_PATH}")
+  include_directories(SYSTEM ${EXTERNAL_DLPACK_PATH})
+else(EXTERNAL_DLPACK_PATH)
+  target_include_directories(dgl PRIVATE "third_party/dlpack/include")
+endif(EXTERNAL_DLPACK_PATH)
+
+if(EXTERNAL_DMLC_PATH)
+  if (USE_HDFS)
+    message(FATAL_ERROR "Cannot use HDFS and external dmlc-core at the same time")
+  endif()
+  message(STATUS "looking for dmlc headers in ${EXTERNAL_DMLC_PATH}")
+  include_directories(SYSTEM ${EXTERNAL_DMLC_PATH})
+  
+  if (NOT EXTERNAL_DMLC_LIB_PATH)
+    message(FATAL_ERROR "EXTERNAL_DMLC_LIB_PATH must be set if EXTERNAL_DMLC_PATH is set")
+  endif()
+  message(STATUS "looking for dmlc library in ${EXTERNAL_DMLC_LIB_PATH}")
+  find_library(DMLC
+    NAMES dmlc
+    PATHS ${EXTERNAL_DMLC_LIB_PATH}
+  )
+  if(NOT DMLC)
+      message(FATAL_ERROR "Failed to find DMLC library")
+  endif()
+  list(APPEND DGL_LINKER_LIBS DMLC)
+
+else(EXTERNAL_DMLC_PATH)
+  target_include_directories(dgl PRIVATE "third_party/dmlc-core/include")
+  # For serialization
+  if (USE_HDFS)
+    option(DMLC_HDFS_SHARED "dgl has to build with dynamic hdfs library" ON)
+  endif()
+  add_subdirectory("third_party/dmlc-core")
+  list(APPEND DGL_LINKER_LIBS dmlc)
+  set(GOOGLE_TEST 0) # Turn off dmlc-core test
+endif(EXTERNAL_DMLC_PATH)
+
+if(EXTERNAL_PHMAP_PATH)
+  include_directories(SYSTEM ${EXTERNAL_PHMAP_PATH})
+else(EXTERNAL_PHMAP_PATH)
+  target_include_directories(dgl PRIVATE "third_party/phmap")
+endif(EXTERNAL_PHMAP_PATH)
+
+# this was removed as an explicit dependency in 1.1
+# target_include_directories(dgl PRIVATE "third_party/xbyak/")
+
+# this is always vendored 
+target_include_directories(dgl PRIVATE "tensoradapter/include")
+
+if(EXTERNAL_NANOFLANN_PATH)
+  include_directories(SYSTEM ${EXTERNAL_NANOFLANN_PATH})
+else(EXTERNAL_NANOFLANN_PATH)
+  target_include_directories(dgl PRIVATE "third_party/nanoflann/include")
+endif(EXTERNAL_NANOFLANN_PATH)
+
+if (EXTERNAL_LIBXSMM_PATH)
+  include_directories(SYSTEM ${EXTERNAL_LIBXSMM_PATH})
+  find_library(XSMM
+    NAMES xsmm
+    PATHS ${EXTERNAL_LIBXSMM_LIB_PATH}
+  )
+  if(NOT XSMM)
+      message(FATAL_ERROR "Failed to find XSMM library")
+  endif()
+  list(APPEND DGL_LINKER_LIBS XSMM)
+
+else(EXTERNAL_LIBXSMM_PATH)
+  target_include_directories(dgl PRIVATE "third_party/libxsmm/include")
+  # Compile LIBXSMM
+  if((NOT MSVC) AND USE_LIBXSMM)
+    set(LIBXSMM_COMPILER "${CMAKE_C_COMPILER}")
+    if (APPLE)
+      set(LIBXSMM_COMPILER "${CMAKE_C_COMPILER} -isysroot ${CMAKE_OSX_SYSROOT}")
+    endif()
+    if(REBUILD_LIBXSMM)
+      add_custom_target(libxsmm COMMAND make realclean COMMAND make -j ECFLAGS="-Wno-error=deprecated-declarations" BLAS=0 CC=${LIBXSMM_COMPILER}
+                        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/third_party/libxsmm
+                        )
+    else(REBUILD_LIBXSMM)
+      add_custom_target(libxsmm COMMAND make -j ECFLAGS="-Wno-error=deprecated-declarations" BLAS=0 CC=${LIBXSMM_COMPILER}
+                        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/third_party/libxsmm
+                        )
+    endif(REBUILD_LIBXSMM)
+    add_dependencies(dgl libxsmm)
+    list(APPEND DGL_LINKER_LIBS -L${CMAKE_SOURCE_DIR}/third_party/libxsmm/lib/ xsmm)
+  endif((NOT MSVC) AND USE_LIBXSMM)
+endif(EXTERNAL_LIBXSMM_PATH)
+
+if (EXTERNAL_PCG_PATH)
+  include_directories(SYSTEM ${EXTERNAL_PCG_PATH})
+else(EXTERNAL_PCG_PATH)
+  target_include_directories(dgl PRIVATE "third_party/pcg/include")
+endif(EXTERNAL_PCG_PATH)
+
+
+if (EXTERNAL_METIS_PATH)
+  if(NOT EXTERNAL_GKLIB_PATH)
+    message(FATAL_ERROR "EXTERNAL_GKLIB_PATH must be set if EXTERNAL_METIS_PATH is set")
   endif()
-  if(REBUILD_LIBXSMM)
-    add_custom_target(libxsmm COMMAND make realclean COMMAND make -j ECFLAGS="-Wno-error=deprecated-declarations" BLAS=0 CC=${LIBXSMM_COMPILER}
-                      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/third_party/libxsmm
-                      )
-  else(REBUILD_LIBXSMM)
-    add_custom_target(libxsmm COMMAND make -j ECFLAGS="-Wno-error=deprecated-declarations" BLAS=0 CC=${LIBXSMM_COMPILER}
-                      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/third_party/libxsmm
-                      )
-  endif(REBUILD_LIBXSMM)
-  add_dependencies(dgl libxsmm)
-  list(APPEND DGL_LINKER_LIBS -L${CMAKE_SOURCE_DIR}/third_party/libxsmm/lib/ xsmm)
-endif((NOT MSVC) AND USE_LIBXSMM)
+  # TODO fix this and add GKLib
+  include_directories(SYSTEM ${EXTERNAL_METIS_PATH})
+  
+  else(EXTERNAL_METIS_PATH)
+    target_include_directories(dgl PRIVATE "third_party/METIS/include")
+    # Compile METIS
+    if(NOT MSVC)
+      set(GKLIB_PATH "${CMAKE_CURRENT_SOURCE_DIR}/third_party/METIS/GKlib")
+      include(${GKLIB_PATH}/GKlibSystem.cmake)
+      include_directories(${GKLIB_PATH})
+      include_directories("third_party/METIS/include/")
+      add_subdirectory("third_party/METIS/libmetis/")
+      list(APPEND DGL_LINKER_LIBS metis)
+    endif(NOT MSVC)
+endif(EXTERNAL_METIS_PATH)
 
 if(NOT MSVC)
   # Only build tensorpipe on linux
