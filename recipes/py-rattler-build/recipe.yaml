# This example shows how to define a recipe using the new YAML based recipe format introduced by 
# CEP 13.

# For more information about this format see: https://prefix-dev.github.io/rattler-build/latest/reference/recipe_file/

# The main differences with the old format is that no preprocessing is required for the file to be valid YAML.
# This means:
# - No "selectors", use YAML if-then-else expressions instead (https://prefix-dev.github.io/rattler-build/latest/selectors/)
# - Jinja expressions are formatted with a leading `$` to make them valid YAML

# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Define variables in this section that you can use in other parts.
context:
  name: py-rattler-build
  python_name: py_rattler_build
  version: "0.35.7"
  python_min: "3.9.*"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://pypi.org/packages/source/${{ python_name[0] }}/${{ python_name }}/${{ python_name }}-${{ version }}.tar.gz
  sha256: fd20988b87f292e701f12d2d4e26969f08daf7d1ccdede072dfd29e9a64c4000

build:
  number: 0
   # only build for the minimal python version
  skip: not match(python, python_min)
  python:
    version_independent: true

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compiler names include 'c', 'cxx' and 'fortran', among others.
    - if: build_platform != target_platform
      then:
        - python
        - cross-python_${{ target_platform }}
        - maturin ~=1.2.1
    - ${{ compiler('c') }}
    - ${{ stdlib('c') }}
    - ${{ compiler('rust') }}
    - cargo-bundle-licenses
  host:
    - python
    - python-abi3
    - maturin ~=1.2.1
    - pip
    - if: unix
      then: openssl
  run:
    - python

tests:
  - python:
      imports:
      - rattler_build
      pip_check: true

about:
  homepage: http://rattler.build/
  summary: 'The fastest way to build conda packages programatically'
  description: |
    The `rattler-build` tooling and library creates cross-platform relocatable
    binaries / packages from a simple recipe format. The recipe format is heavily
    inspired by `conda-build` and `boa`, and the output of a regular `rattler-build`
    run is a package that can be installed using `mamba`, `rattler` or `conda`.

  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: BSD-3-Clause
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE
  # The documentation and repository URLs are optional.
  documentation: https://rattler.build/latest/reference/python_bindings/
  repository: https://github.com/prefix-dev/rattler-build

extra:
  recipe-maintainers:
    - Hofer-Julian
    - wolfv
