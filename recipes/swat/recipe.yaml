# This example shows how to define a recipe using the new YAML based recipe format introduced by 
# CEP 13.

# For more information about this format see: https://prefix-dev.github.io/rattler-build/latest/reference/recipe_file/

# The main differences with the old format is that no preprocessing is required for the file to be valid YAML.
# This means:
# - No "selectors", use YAML if-then-else expressions instead (https://prefix-dev.github.io/rattler-build/latest/selectors/)
# - Jinja expressions are formatted with a leading `$` to make them valid YAML

# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Define variables in this section that you can use in other parts.
context:
  name: swat
  version: "1.15.0"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://github.com/sassoftware/python-${{ name }}/archive/refs/tags/v${{ version }}.tar.gz
  sha256: b8d306b150fb91af456676665898ba7bbc1173095b795a891abccdeb868b0fc7

build:
  script: python -m pip install . -vv
  number: 0

requirements:
  build:
    - ${{ compiler('c') }}
    - ${{ stdlib('c') }}
  host:
    - python
    - pip
    - setuptools
  run:
    - python
    - pandas >=0.16.0
    - pytz
    - six >=1.9.0
    - requests
    - urllib3

tests:
  # Some packages might need a `test/commands` key to check CLI.
  - python:
      # A list of modules that the test will try to import
      imports:
      - swat
      # Also run `pip check` to verify the integrity 
      pip_check: true

about:
  homepage: https://github.com/sassoftware/python-swat
  summary: 'Python interface to SAS Cloud Analytic Services engine.'
  description: |
    The SAS SWAT package is a Python interface to the SAS Cloud Analytic Services (CAS) engine (the centerpiece of the SAS Viya framework). With this package, you can load and analyze data sets of any size on your desktop or in the cloud. Since CAS can be used on a local desktop or in a hosted cloud environment, you can analyze extremely large data sets using as much processing power as you need, while still retaining the ease-of-use of Python on the client side.
  license: Apache-2.0
  license_file: LICENSE.md
  repository: https://github.com/sassoftware/python-swat

extra:
  recipe-maintainers:
    - EllaBootQC
    