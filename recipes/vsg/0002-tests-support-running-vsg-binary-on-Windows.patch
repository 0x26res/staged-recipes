From c30ded0003e481090ed0cdafe59f485dcb5f7647 Mon Sep 17 00:00:00 2001
From: Brandon Maier <brandon.maier@gmail.com>
Date: Thu, 21 Nov 2024 19:06:47 -0600
Subject: [PATCH 2/3] tests: support running 'vsg' binary on Windows

A large number of tests fail on Windows with the following error

> ________ test_severity_using_main.test_architecture_with_configuration ________
> [gw0] win32 -- Python 3.8.20 %PREFIX%\python.exe
>
> self = <tests.severity.test_main.test_severity_using_main testMethod=test_architecture_with_configuration>
>
>     def test_architecture_with_configuration(self):
>         try:
> >           subprocess.check_output(["bin/vsg", "-f", self._sArchitectureFileName, "-c", sConfigFile])
>
> tests\severity\test_main.py:86:
> _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
> ..\_test_env\lib\subprocess.py:415: in check_output
>     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
> ..\_test_env\lib\subprocess.py:493: in run
>     with Popen(*popenargs, **kwargs) as process:
> ..\_test_env\lib\subprocess.py:858: in __init__
>     self._execute_child(args, executable, preexec_fn, close_fds,
...
> E FileNotFoundError: [WinError 2] The system cannot find the file specified
> ..\_test_env\lib\subprocess.py:1327: FileNotFoundError

Tests that call "bin/vsg" are relying on the Unix shebang (e.g.
"#!/usr/bin/python") to launch `vsg` using the Python interpreter, But
this is not supported on Windows. Instead launch `vsg` with Python
directly.

Signed-off-by: Brandon Maier <brandon.maier@gmail.com>
---
 tests/context/test_main.py            |  3 +-
 tests/severity/test_main.py           | 18 ++++----
 tests/source_file/test_source_file.py |  6 +--
 tests/utils.py                        |  5 +++
 tests/vsg/test_rc.py                  |  3 +-
 tests/vsg/test_vsg.py                 | 62 +++++++++++++--------------
 6 files changed, 52 insertions(+), 45 deletions(-)

diff --git a/tests/context/test_main.py b/tests/context/test_main.py
index b65b9e05..2faaa331 100644
--- a/tests/context/test_main.py
+++ b/tests/context/test_main.py
@@ -7,6 +7,7 @@
 from tempfile import TemporaryDirectory
 
 from vsg import __main__, severity
+from tests import utils
 
 sFileName = "context_classification_test_input.vhd"
 sFixedFileName = "context_classification_test_input.fixed.vhd"
@@ -29,7 +30,7 @@ def tearDown(self):
 
     def test_classification_file(self):
         self.maxDiff = None
-        subprocess.check_output(["bin/vsg", "-f", self._sFileName, "--fix"]).decode("utf-8").split("\n")
+        subprocess.check_output([*utils.vsg_exec(), "-f", self._sFileName, "--fix"]).decode("utf-8").split("\n")
 
         lActual = pathlib.Path(self._sFileName).read_text().split("\n")
         lExpected = pathlib.Path(sFixedFile).read_text().split("\n")
diff --git a/tests/severity/test_main.py b/tests/severity/test_main.py
index 0722f0e4..49b0a2be 100644
--- a/tests/severity/test_main.py
+++ b/tests/severity/test_main.py
@@ -40,7 +40,7 @@ def tearDown(self):
 
     def test_entity_without_configuration(self):
         try:
-            subprocess.check_output(["bin/vsg", "-f", self._sEntityFileName])
+            subprocess.check_output([*utils.vsg_exec(), "-f", self._sEntityFileName])
         except subprocess.CalledProcessError as e:
             lActual = e.output.decode("utf-8").split("\n")
             iExitStatus = e.returncode
@@ -52,7 +52,7 @@ def test_entity_without_configuration(self):
 
     def test_entity_with_configuration(self):
         try:
-            subprocess.check_output(["bin/vsg", "-f", self._sEntityFileName, "-c", sConfigFile])
+            subprocess.check_output([*utils.vsg_exec(), "-f", self._sEntityFileName, "-c", sConfigFile])
         except subprocess.CalledProcessError as e:
             lActual = e.output.decode("utf-8").split("\n")
             iExitStatus = e.returncode
@@ -63,7 +63,7 @@ def test_entity_with_configuration(self):
         self.assertEqual(utils.replace_token(utils.replace_total_count(lActual), self._sEntityFileName, sEntityFileName), lExpected)
 
     def test_entity_with_configuration_and_fixed(self):
-        lActual = subprocess.check_output(["bin/vsg", "-f", self._sEntityFileName, "-c", sConfigFile, "--fix"]).decode("utf-8").split("\n")
+        lActual = subprocess.check_output([*utils.vsg_exec(), "-f", self._sEntityFileName, "-c", sConfigFile, "--fix"]).decode("utf-8").split("\n")
 
         lExpected = pathlib.Path(sOutputFileWithConfigFixed).read_text().split("\n")
 
@@ -71,7 +71,7 @@ def test_entity_with_configuration_and_fixed(self):
 
     def test_architecture_without_configuration(self):
         try:
-            subprocess.check_output(["bin/vsg", "-f", self._sArchitectureFileName])
+            subprocess.check_output([*utils.vsg_exec(), "-f", self._sArchitectureFileName])
         except subprocess.CalledProcessError as e:
             lActual = e.output.decode("utf-8").split("\n")
             iExitStatus = e.returncode
@@ -83,7 +83,7 @@ def test_architecture_without_configuration(self):
 
     def test_architecture_with_configuration(self):
         try:
-            subprocess.check_output(["bin/vsg", "-f", self._sArchitectureFileName, "-c", sConfigFile])
+            subprocess.check_output([*utils.vsg_exec(), "-f", self._sArchitectureFileName, "-c", sConfigFile])
         except subprocess.CalledProcessError as e:
             lActual = e.output.decode("utf-8").split("\n")
             iExitStatus = e.returncode
@@ -94,7 +94,7 @@ def test_architecture_with_configuration(self):
         self.assertEqual(utils.replace_token(utils.replace_total_count(lActual), self._sArchitectureFileName, sArchitectureFileName), lExpected)
 
     def test_architecture_with_configuration_and_fixed(self):
-        lActual = subprocess.check_output(["bin/vsg", "-f", self._sArchitectureFileName, "-c", sConfigFile, "--fix"]).decode("utf-8").split("\n")
+        lActual = subprocess.check_output([*utils.vsg_exec(), "-f", self._sArchitectureFileName, "-c", sConfigFile, "--fix"]).decode("utf-8").split("\n")
 
         lExpected = pathlib.Path(sArchitectureOutputFileWithConfigFixed).read_text().split("\n")
 
@@ -102,7 +102,7 @@ def test_architecture_with_configuration_and_fixed(self):
 
     def test_both_with_configuration(self):
         try:
-            subprocess.check_output(["bin/vsg", "-f", self._sEntityFileName, self._sArchitectureFileName, "-c", sConfigFile])
+            subprocess.check_output([*utils.vsg_exec(), "-f", self._sEntityFileName, self._sArchitectureFileName, "-c", sConfigFile])
         except subprocess.CalledProcessError as e:
             lActual = e.output.decode("utf-8").split("\n")
             iExitStatus = e.returncode
@@ -122,7 +122,7 @@ def test_both_with_configuration(self):
 
     def test_both_with_configuration_and_fixed(self):
         lActual = (
-            subprocess.check_output(["bin/vsg", "-f", self._sEntityFileName, self._sArchitectureFileName, "-c", sConfigFile, "--fix"])
+            subprocess.check_output([*utils.vsg_exec(), "-f", self._sEntityFileName, self._sArchitectureFileName, "-c", sConfigFile, "--fix"])
             .decode("utf-8")
             .split("\n")
         )
@@ -141,7 +141,7 @@ def test_both_with_configuration_and_fixed(self):
 
     def test_junit_output(self):
         try:
-            subprocess.check_output(["bin/vsg", "-f", self._sEntityFileName, "-c", sConfigFile, "-j", self._sJUnitFileName])
+            subprocess.check_output([*utils.vsg_exec(), "-f", self._sEntityFileName, "-c", sConfigFile, "-j", self._sJUnitFileName])
         except subprocess.CalledProcessError as e:
             iExitStatus = e.returncode
 
diff --git a/tests/source_file/test_source_file.py b/tests/source_file/test_source_file.py
index 7b53f4bd..2bc91488 100644
--- a/tests/source_file/test_source_file.py
+++ b/tests/source_file/test_source_file.py
@@ -30,7 +30,7 @@ def tearDown(self):
 
     def test_file_not_found(self):
         try:
-            subprocess.check_output(["bin/vsg", "-f", "no_file.vhd"], stderr=subprocess.STDOUT)
+            subprocess.check_output([*utils.vsg_exec(), "-f", "no_file.vhd"], stderr=subprocess.STDOUT)
         except subprocess.CalledProcessError as e:
             exit_status: int = e.returncode
 
@@ -43,7 +43,7 @@ def test_file_no_permission(self):
         pathlib.Path(sNoPermissionTempFile).touch(mode=0o222, exist_ok=True)
 
         try:
-            subprocess.check_output(["bin/vsg", "-f", sNoPermissionTempFile])
+            subprocess.check_output([*utils.vsg_exec(), "-f", sNoPermissionTempFile])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -55,7 +55,7 @@ def test_file_no_permission(self):
 
     def test_file_empty(self):
         try:
-            subprocess.check_output(["bin/vsg", "-f", "tests/source_file/" + sEmptyFile])
+            subprocess.check_output([*utils.vsg_exec(), "-f", "tests/source_file/" + sEmptyFile])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
diff --git a/tests/utils.py b/tests/utils.py
index ebdaa972..8c81559f 100644
--- a/tests/utils.py
+++ b/tests/utils.py
@@ -3,6 +3,7 @@
 import os
 import pprint
 import re
+import sys
 
 import yaml
 
@@ -141,3 +142,7 @@ def is_user_admin():
         pass
 
     return ctypes.windll.shell32.IsUserAnAdmin() == 1
+
+
+def vsg_exec():
+    return [sys.executable, "bin/vsg"]
diff --git a/tests/vsg/test_rc.py b/tests/vsg/test_rc.py
index 6ba95855..d234d776 100644
--- a/tests/vsg/test_rc.py
+++ b/tests/vsg/test_rc.py
@@ -2,6 +2,7 @@
 import subprocess
 import unittest
 
+from tests import utils
 
 class command_line_args:
     """This is used as an input into the version command."""
@@ -72,7 +73,7 @@ def test_rc_command_line_argument_w_invalid_rule(self):
         iExitStatus = -1
 
         try:
-            subprocess.check_output(["bin/vsg", "-rc", "unknown_rule_001"])
+            subprocess.check_output([*utils.vsg_exec(), "-rc", "unknown_rule_001"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
diff --git a/tests/vsg/test_vsg.py b/tests/vsg/test_vsg.py
index f1b8ae09..8e10f900 100644
--- a/tests/vsg/test_vsg.py
+++ b/tests/vsg/test_vsg.py
@@ -33,7 +33,7 @@ def test_multiple_configuration_w_multiple_filelists(self):
         lExpected.append("")
 
         try:
-            subprocess.check_output(["bin/vsg", "--configuration", "tests/vsg/config_1.json", "tests/vsg/config_2.json", "--output_format", "syntastic"])
+            subprocess.check_output([*utils.vsg_exec(), "--configuration", "tests/vsg/config_1.json", "tests/vsg/config_2.json", "--output_format", "syntastic"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -48,7 +48,7 @@ def test_single_configuration_w_filelist(self):
         lExpected.append("")
 
         try:
-            subprocess.check_output(["bin/vsg", "--configuration", "tests/vsg/config_1.json", "--output_format", "syntastic"])
+            subprocess.check_output([*utils.vsg_exec(), "--configuration", "tests/vsg/config_1.json", "--output_format", "syntastic"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -62,7 +62,7 @@ def test_single_configuration_w_filelist(self):
         lExpected.append("")
 
         try:
-            subprocess.check_output(["bin/vsg", "--configuration", "tests/vsg/config_2.json", "--output_format", "syntastic"])
+            subprocess.check_output([*utils.vsg_exec(), "--configuration", "tests/vsg/config_2.json", "--output_format", "syntastic"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -76,7 +76,7 @@ def test_single_configuration_w_rule_disable(self):
         lExpected.append("")
 
         lActual = subprocess.check_output(
-            ["bin/vsg", "--configuration", "tests/vsg/config_3.json", "--output_format", "syntastic", "-f", "tests/vsg/entity1.vhd"],
+            [*utils.vsg_exec(), "--configuration", "tests/vsg/config_3.json", "--output_format", "syntastic", "-f", "tests/vsg/entity1.vhd"],
         )
         lActual = str(lActual.decode("utf-8")).split("\n")
         self.assertEqual(lActual, lExpected)
@@ -89,7 +89,7 @@ def test_multiple_configuration_w_rule_disable(self):
         try:
             subprocess.check_output(
                 [
-                    "bin/vsg",
+                    *utils.vsg_exec(),
                     "--configuration",
                     "tests/vsg/config_3.json",
                     "tests/vsg/config_4.json",
@@ -112,7 +112,7 @@ def test_reverse_multiple_configuration_w_rule_disable(self):
         lExpected.append("")
 
         lActual = subprocess.check_output(
-            ["bin/vsg", "--configuration", "tests/vsg/config_4.json", "tests/vsg/config_3.json", "--output_format", "syntastic", "-f", "tests/vsg/entity1.vhd"],
+            [*utils.vsg_exec(), "--configuration", "tests/vsg/config_4.json", "tests/vsg/config_3.json", "--output_format", "syntastic", "-f", "tests/vsg/entity1.vhd"],
         )
         lActual = str(lActual.decode("utf-8")).split("\n")
         self.assertEqual(lActual, lExpected)
@@ -128,7 +128,7 @@ def test_invalid_configuration(self):
         try:
             lActual = subprocess.check_output(
                 [
-                    "bin/vsg",
+                    *utils.vsg_exec(),
                     "--configuration",
                     "tests/vsg/config_error.json",
                     "--output_format",
@@ -163,7 +163,7 @@ def test_local_rules(self):
 
         try:
             subprocess.check_output(
-                ["bin/vsg", "--style", "jcl", "-f", "tests/vsg/entity_architecture.vhd", "-of", "syntastic", "-lr", "tests/vsg/local_rules"],
+                [*utils.vsg_exec(), "--style", "jcl", "-f", "tests/vsg/entity_architecture.vhd", "-of", "syntastic", "-lr", "tests/vsg/local_rules"],
             )
             iExitStatus = 0
         except subprocess.CalledProcessError as e:
@@ -182,7 +182,7 @@ def test_invalid_local_rule_directory(self):
 
         try:
             lActual = subprocess.check_output(
-                ["bin/vsg", "-f", "tests/vsg/entity_architecture.vhd", "-of", "syntastic", "-lr", "tests/vsg/invalid_local_rule_directory"],
+                [*utils.vsg_exec(), "-f", "tests/vsg/entity_architecture.vhd", "-of", "syntastic", "-lr", "tests/vsg/invalid_local_rule_directory"],
             )
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
@@ -198,7 +198,7 @@ def test_globbing_filenames_in_configuration(self):
         lExpected.append("")
 
         try:
-            subprocess.check_output(["bin/vsg", "--configuration", "tests/vsg/config_glob.json", "--output_format", "syntastic"])
+            subprocess.check_output([*utils.vsg_exec(), "--configuration", "tests/vsg/config_glob.json", "--output_format", "syntastic"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -220,7 +220,7 @@ def test_single_yaml_configuration_w_filelist(self):
         lExpected.append("")
 
         try:
-            subprocess.check_output(["bin/vsg", "--configuration", "tests/vsg/config_1.yaml", "--output_format", "syntastic"])
+            subprocess.check_output([*utils.vsg_exec(), "--configuration", "tests/vsg/config_1.yaml", "--output_format", "syntastic"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -234,7 +234,7 @@ def test_single_yaml_configuration_w_filelist(self):
         lExpected.append("")
 
         try:
-            subprocess.check_output(["bin/vsg", "--configuration", "tests/vsg/config_2.json", "--output_format", "syntastic"])
+            subprocess.check_output([*utils.vsg_exec(), "--configuration", "tests/vsg/config_2.json", "--output_format", "syntastic"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -250,7 +250,7 @@ def test_multiple_yaml_configuration_w_multiple_filelists(self):
         lExpected.append("")
 
         try:
-            subprocess.check_output(["bin/vsg", "--configuration", "tests/vsg/config_1.yaml", "tests/vsg/config_2.yaml", "--output_format", "syntastic"])
+            subprocess.check_output([*utils.vsg_exec(), "--configuration", "tests/vsg/config_1.yaml", "tests/vsg/config_2.yaml", "--output_format", "syntastic"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -264,7 +264,7 @@ def test_single_yaml_configuration_w_rule_disable(self):
         lExpected.append("")
 
         lActual = subprocess.check_output(
-            ["bin/vsg", "--configuration", "tests/vsg/config_3.yaml", "--output_format", "syntastic", "-f", "tests/vsg/entity1.vhd"],
+            [*utils.vsg_exec(), "--configuration", "tests/vsg/config_3.yaml", "--output_format", "syntastic", "-f", "tests/vsg/entity1.vhd"],
         )
         lActual = str(lActual.decode("utf-8")).split("\n")
         self.assertEqual(lActual, lExpected)
@@ -277,7 +277,7 @@ def test_multiple_yaml_configuration_w_rule_disable(self):
         try:
             subprocess.check_output(
                 [
-                    "bin/vsg",
+                    *utils.vsg_exec(),
                     "--configuration",
                     "tests/vsg/config_3.yaml",
                     "tests/vsg/config_4.yaml",
@@ -300,7 +300,7 @@ def test_reverse_yaml_multiple_configuration_w_rule_disable(self):
         lExpected.append("")
 
         lActual = subprocess.check_output(
-            ["bin/vsg", "--configuration", "tests/vsg/config_4.yaml", "tests/vsg/config_3.yaml", "--output_format", "syntastic", "-f", "tests/vsg/entity1.vhd"],
+            [*utils.vsg_exec(), "--configuration", "tests/vsg/config_4.yaml", "tests/vsg/config_3.yaml", "--output_format", "syntastic", "-f", "tests/vsg/entity1.vhd"],
         )
         lActual = str(lActual.decode("utf-8")).split("\n")
         self.assertEqual(lActual, lExpected)
@@ -312,7 +312,7 @@ def test_globbing_filenames_in_yaml_configuration(self):
         lExpected.append("")
 
         try:
-            subprocess.check_output(["bin/vsg", "--configuration", "tests/vsg/config_glob.yaml", "--output_format", "syntastic"])
+            subprocess.check_output([*utils.vsg_exec(), "--configuration", "tests/vsg/config_glob.yaml", "--output_format", "syntastic"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -331,13 +331,13 @@ def test_oc_command_line_argument(self):
         lExpected = []
         lExpected.append("")
 
-        lActual = subprocess.check_output(["bin/vsg", "-oc", os.path.join(self._tmpdir.name, "deleteme.json")])
+        lActual = subprocess.check_output([*utils.vsg_exec(), "-oc", os.path.join(self._tmpdir.name, "deleteme.json")])
         lActual = str(lActual.decode("utf-8")).split("\n")
         self.assertEqual(lActual, lExpected)
 
     def test_missing_configuration_file(self):
         try:
-            subprocess.check_output(["bin/vsg", "-c", "missing_configuration.yaml"], stderr=subprocess.STDOUT)
+            subprocess.check_output([*utils.vsg_exec(), "-c", "missing_configuration.yaml"], stderr=subprocess.STDOUT)
         except subprocess.CalledProcessError as e:
             iExitStatus = e.returncode
 
@@ -351,7 +351,7 @@ def test_no_permission_configuration_file(self):
         sExpected = f"ERROR: encountered PermissionError, Permission denied while opening configuration file: {sNoPermissionFile}\n"
 
         try:
-            subprocess.check_output(["bin/vsg", "-c", sNoPermissionFile])
+            subprocess.check_output([*utils.vsg_exec(), "-c", sNoPermissionFile])
         except subprocess.CalledProcessError as e:
             sActual = str(e.output.decode("utf-8"))
             iExitStatus = e.returncode
@@ -366,7 +366,7 @@ def test_missing_files_in_configuration_file(self):
         lExpected.append("")
 
         try:
-            subprocess.check_output(["bin/vsg", "-c", "tests/vsg/missing_file_config.yaml", "--output_format", "syntastic"])
+            subprocess.check_output([*utils.vsg_exec(), "-c", "tests/vsg/missing_file_config.yaml", "--output_format", "syntastic"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -380,7 +380,7 @@ def test_summary_output_format_error(self):
         lExpectedStdOut = [""]
 
         try:
-            subprocess.check_output(["bin/vsg", "-f", "tests/vsg/entity_architecture.vhd", "-of", "summary"], stderr=subprocess.PIPE)
+            subprocess.check_output([*utils.vsg_exec(), "-f", "tests/vsg/entity_architecture.vhd", "-of", "summary"], stderr=subprocess.PIPE)
             iExitStatus = 0
         except subprocess.CalledProcessError as e:
             lActualStdOut = str(e.output.decode("utf-8")).split("\n")
@@ -398,7 +398,7 @@ def test_summary_output_format_error_with_local_rules(self):
 
         try:
             subprocess.check_output(
-                ["bin/vsg", "-f", "tests/vsg/entity_architecture.vhd", "-of", "summary", "-lr", "tests/vsg/local_rules"],
+                [*utils.vsg_exec(), "-f", "tests/vsg/entity_architecture.vhd", "-of", "summary", "-lr", "tests/vsg/local_rules"],
                 stderr=subprocess.PIPE,
             )
             iExitStatus = 0
@@ -416,7 +416,7 @@ def test_summary_output_format_ok(self):
         lExpected = ["File: tests/vsg/entity_architecture.fixed.vhd OK (200 rules checked) [Error: 0] [Warning: 0]", ""]
 
         lActual = (
-            subprocess.check_output(["bin/vsg", "-f", "tests/vsg/entity_architecture.fixed.vhd", "-of", "summary"], stderr=subprocess.STDOUT)
+            subprocess.check_output([*utils.vsg_exec(), "-f", "tests/vsg/entity_architecture.fixed.vhd", "-of", "summary"], stderr=subprocess.STDOUT)
             .decode("utf-8")
             .split("\n")
         )
@@ -435,7 +435,7 @@ def test_summary_output_format_multiple_mixed(self):
         try:
             subprocess.check_output(
                 [
-                    "bin/vsg",
+                    *utils.vsg_exec(),
                     "-f",
                     "tests/vsg/entity_architecture.vhd",
                     "tests/vsg/entity_architecture.fixed.vhd",
@@ -469,7 +469,7 @@ def test_summary_output_format_multiple_mixed_jobs_1(self):
         try:
             subprocess.check_output(
                 [
-                    "bin/vsg",
+                    *utils.vsg_exec(),
                     "-f",
                     "tests/vsg/entity_architecture.vhd",
                     "tests/vsg/entity_architecture.fixed.vhd",
@@ -504,7 +504,7 @@ def test_summary_output_format_multiple_mixed_jobs_2(self):
         try:
             subprocess.check_output(
                 [
-                    "bin/vsg",
+                    *utils.vsg_exec(),
                     "-f",
                     "tests/vsg/entity_architecture.vhd",
                     "tests/vsg/entity_architecture.fixed.vhd",
@@ -533,7 +533,7 @@ def test_globbing_filenames_in_configuration_with_file_rules(self):
         lExpected.append("")
 
         try:
-            subprocess.check_output(["bin/vsg", "--configuration", "tests/vsg/config_glob_with_file_rules.yaml", "--output_format", "syntastic"])
+            subprocess.check_output([*utils.vsg_exec(), "--configuration", "tests/vsg/config_glob_with_file_rules.yaml", "--output_format", "syntastic"])
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
             iExitStatus = e.returncode
@@ -547,7 +547,7 @@ def test_configuration_with_file_rules_and_no_file_list_entity2(self):
 
         try:
             subprocess.check_output(
-                ["bin/vsg", "--configuration", "tests/vsg/config_file_rules.yaml", "-f", "tests/vsg/entity2.vhd", "--output_format", "syntastic"],
+                [*utils.vsg_exec(), "--configuration", "tests/vsg/config_file_rules.yaml", "-f", "tests/vsg/entity2.vhd", "--output_format", "syntastic"],
             )
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
@@ -562,7 +562,7 @@ def test_configuration_with_file_rules_and_no_file_list_entity1(self):
 
         try:
             subprocess.check_output(
-                ["bin/vsg", "--configuration", "tests/vsg/config_file_rules.yaml", "-f", "tests/vsg/entity1.vhd", "--output_format", "syntastic"],
+                [*utils.vsg_exec(), "--configuration", "tests/vsg/config_file_rules.yaml", "-f", "tests/vsg/entity1.vhd", "--output_format", "syntastic"],
             )
         except subprocess.CalledProcessError as e:
             lActual = str(e.output.decode("utf-8")).split("\n")
@@ -575,6 +575,6 @@ def test_file_as_stdin(self):
             lExpected = []
             lExpected.append("")
 
-            lActual = subprocess.check_output(["bin/vsg", "--configuration", "tests/vsg/config_3.yaml", "--output_format", "syntastic", "--stdin"], stdin=file1)
+            lActual = subprocess.check_output([*utils.vsg_exec(), "--configuration", "tests/vsg/config_3.yaml", "--output_format", "syntastic", "--stdin"], stdin=file1)
             lActual = str(lActual.decode("utf-8")).split("\n")
             self.assertEqual(lActual, lExpected)
-- 
2.47.0

