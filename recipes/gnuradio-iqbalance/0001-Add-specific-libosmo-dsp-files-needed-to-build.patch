From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ryan Volz <ryan.volz@gmail.com>
Date: Mon, 23 Oct 2023 15:42:18 -0400
Subject: [PATCH] Add specific libosmo-dsp files needed to build.

---
 MANIFEST.md                                  |   1 +
 libosmo-dsp/AUTHORS                          |   1 +
 libosmo-dsp/COPYING                          | 339 +++++++++++++++++
 libosmo-dsp/include/osmocom/dsp/cfile.h      |  50 +++
 libosmo-dsp/include/osmocom/dsp/cxvec.h      |  67 ++++
 libosmo-dsp/include/osmocom/dsp/cxvec_math.h | 128 +++++++
 libosmo-dsp/include/osmocom/dsp/iqbal.h      |  77 ++++
 libosmo-dsp/src/cxvec.c                      | 131 +++++++
 libosmo-dsp/src/iqbal.c                      | 366 +++++++++++++++++++
 9 files changed, 1160 insertions(+)
 create mode 100644 libosmo-dsp/AUTHORS
 create mode 100644 libosmo-dsp/COPYING
 create mode 100644 libosmo-dsp/include/osmocom/dsp/cfile.h
 create mode 100644 libosmo-dsp/include/osmocom/dsp/cxvec.h
 create mode 100644 libosmo-dsp/include/osmocom/dsp/cxvec_math.h
 create mode 100644 libosmo-dsp/include/osmocom/dsp/iqbal.h
 create mode 100644 libosmo-dsp/src/cxvec.c
 create mode 100644 libosmo-dsp/src/iqbal.c

diff --git a/MANIFEST.md b/MANIFEST.md
index 13280e0..be4e415 100644
--- a/MANIFEST.md
+++ b/MANIFEST.md
@@ -1,3 +1,4 @@
+
 title: gr-iqbalance
 brief: GNU Radio block to correct IQ imbalance in quadrature receivers
 tags:
diff --git a/libosmo-dsp/AUTHORS b/libosmo-dsp/AUTHORS
new file mode 100644
index 0000000..50d728b
--- /dev/null
+++ b/libosmo-dsp/AUTHORS
@@ -0,0 +1 @@
+Sylvain Munaut <tnt@246tNt.com>
diff --git a/libosmo-dsp/COPYING b/libosmo-dsp/COPYING
new file mode 100644
index 0000000..d511905
--- /dev/null
+++ b/libosmo-dsp/COPYING
@@ -0,0 +1,339 @@
+		    GNU GENERAL PUBLIC LICENSE
+		       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+			    Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+		    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+			    NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+		     END OF TERMS AND CONDITIONS
+
+	    How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/libosmo-dsp/include/osmocom/dsp/cfile.h b/libosmo-dsp/include/osmocom/dsp/cfile.h
new file mode 100644
index 0000000..be9392e
--- /dev/null
+++ b/libosmo-dsp/include/osmocom/dsp/cfile.h
@@ -0,0 +1,50 @@
+/*
+ * cfile.h
+ *
+ * Helpers to read .cfile (complex samples from gnuradio)
+ *
+ * Copyright (C) 2011  Sylvain Munaut <tnt@246tNt.com>
+ *
+ * All Rights Reserved
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef __OSMO_DSP_CFILE_H__
+#define __OSMO_DSP_CFILE_H__
+
+/*! \defgroup cfile .cfile helpers
+ *  @{
+ */
+
+/*! \file cfile.h
+ *  \brief Osmocom .cfile helpers header
+ */
+
+#include <complex.h>
+
+/*! \brief Structure representing a currently mapped .cfile */
+struct cfile {
+	float complex *data;	/*!< \brief Data array (read only !) */
+	unsigned int len;	/*!< \brief Length (in samples) of the data */
+	size_t _blen;		/*!< \brief Length (in bytes) of the data */
+};
+
+struct cfile *cfile_load(const char *filename);
+void cfile_release(struct cfile *cf);
+
+/*! @} */
+
+#endif /* __OSMO_DSP_CFILE_H__ */
diff --git a/libosmo-dsp/include/osmocom/dsp/cxvec.h b/libosmo-dsp/include/osmocom/dsp/cxvec.h
new file mode 100644
index 0000000..063e30c
--- /dev/null
+++ b/libosmo-dsp/include/osmocom/dsp/cxvec.h
@@ -0,0 +1,67 @@
+/*
+ * cxvec.h
+ *
+ * Complex vectors handling
+ *
+ * Copyright (C) 2011  Sylvain Munaut <tnt@246tNt.com>
+ *
+ * All Rights Reserved
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef __OSMO_DSP_CXVEC_H__
+#define __OSMO_DSP_CXVEC_H__
+
+/*! \defgroup cxvec Complex vectors
+ *  @{
+ */
+
+/*! \file cxvec.h
+ *  \brief Osmocom Complex vectors header
+ */
+
+#include <complex.h>
+
+#define CXVEC_FLG_REAL_ONLY	(1<<0)	/*!< \brief Real values only */
+
+/*! \brief Complex vector */
+struct osmo_cxvec {
+	int len;		/*!< \brief Valid length */
+	int max_len;		/*!< \brief Maximum length in data field */
+	int flags;		/*!< \brief Flags, see CXVEC_FLG_xxx */
+	float complex *data;	/*!< \brief Data field */
+	float complex _data[0];	/*!< \brief Optional inline data array */
+};
+
+void
+osmo_cxvec_init_from_data(struct osmo_cxvec *cv,
+                          float complex *data, int len);
+
+struct osmo_cxvec *
+osmo_cxvec_alloc_from_data(float complex *data, int len);
+
+struct osmo_cxvec *
+osmo_cxvec_alloc(int max_len);
+
+void
+osmo_cxvec_free(struct osmo_cxvec *cv);
+
+void
+osmo_cxvec_dbg_dump(struct osmo_cxvec *cv, const char *fname);
+
+/*! @} */
+
+#endif /* __OSMO_DSP_CXVEC_H__ */
diff --git a/libosmo-dsp/include/osmocom/dsp/cxvec_math.h b/libosmo-dsp/include/osmocom/dsp/cxvec_math.h
new file mode 100644
index 0000000..7e372c4
--- /dev/null
+++ b/libosmo-dsp/include/osmocom/dsp/cxvec_math.h
@@ -0,0 +1,128 @@
+/*
+ * cxvec_math.h
+ *
+ * Complex vectors math and signal processing
+ *
+ * Copyright (C) 2011  Sylvain Munaut <tnt@246tNt.com>
+ *
+ * All Rights Reserved
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef __OSMO_DSP_CXVEC_MATH_H__
+#define __OSMO_DSP_CXVEC_MATH_H__
+
+/*! \defgroup cxvec_math Complex vectors math and signal processing
+ *  \ingroup cxvec
+ *  @{
+ */
+
+/*! \file cxvec_math.h
+ *  \brief Osmocom Complex vectors math header
+ */
+
+#include <complex.h>
+#include <math.h>
+
+#include <osmocom/dsp/cxvec.h>
+
+
+	/* Generic math stuff */
+
+#define M_PIf (3.14159265358979323846264338327f) /*!< \brief PI value float */
+
+/*! \brief Unnormalized sinc function
+ *  \param[in] x Value for which to compute the sinc function.
+ *  \returns The sinc(x) value
+ *
+ *  The function is defined as \f$\frac{\sin(x)}{x}\f$
+ */
+static inline float
+osmo_sinc(float x)
+{
+	if ((x >= 0.01f) || (x <= -0.01f)) return (sinf(x)/x);
+	return 1.0f;
+}
+
+/*! \brief Squared norm of a given complex
+ *  \param[in] c Complex number for which to compute the squared norm
+ *  \returns \f$|c|^2\f$
+ */
+static inline float
+osmo_normsqf(float complex c)
+{
+	return crealf(c) * crealf(c) + cimagf(c) * cimagf(c);
+}
+
+
+	/* Complex vector math */
+
+struct osmo_cxvec *
+osmo_cxvec_scale(const struct osmo_cxvec *in, float complex scale,
+                 struct osmo_cxvec *out);
+
+struct osmo_cxvec *
+osmo_cxvec_rotate(const struct osmo_cxvec *in, float freq_shift,
+                  struct osmo_cxvec *out);
+
+struct osmo_cxvec *
+osmo_cxvec_delay(const struct osmo_cxvec *v, float delay,
+                 struct osmo_cxvec *out);
+
+/*! \brief Various possible types of convolution span */
+enum osmo_cxvec_conv_type {
+	/*! \brief Full span (every possible overlap of f onto g) */
+	CONV_FULL_SPAN,	
+	/*! \brief Every possible full overlap of f onto g */
+	CONV_OVERLAP_ONLY,
+	/*! \brief Center f sequence on every g sample */
+	CONV_NO_DELAY,
+};
+
+struct osmo_cxvec *
+osmo_cxvec_convolve(const struct osmo_cxvec *f, const struct osmo_cxvec *g,
+                    enum osmo_cxvec_conv_type type, struct osmo_cxvec *out);
+
+struct osmo_cxvec *
+osmo_cxvec_correlate(const struct osmo_cxvec *f, const struct osmo_cxvec *g,
+                     int g_corr_step, struct osmo_cxvec *out);
+
+float complex
+osmo_cxvec_interpolate_point(const struct osmo_cxvec *cv, float pos);
+
+/*! \brief Various possible peak finding algorithms */
+enum osmo_cxvec_peak_alg {
+	/*! \brief Weigthed position for the max pwr window */
+	PEAK_WEIGH_WIN,	
+	/*! \brief Weighted position of the peak centered window */
+	PEAK_WEIGH_WIN_CENTER,
+	/*! \brief Early-Late balancing around peak */
+	PEAK_EARLY_LATE,
+};
+
+float
+osmo_cxvec_peak_energy_find(const struct osmo_cxvec *cv, int win_size,
+                            enum osmo_cxvec_peak_alg alg,
+                            float complex *peak_val_p);
+
+struct osmo_cxvec *
+osmo_cxvec_sig_normalize(const struct osmo_cxvec *sig,
+                         int decim, float freq_shift,
+                         struct osmo_cxvec *out);
+
+/*! @} */
+
+#endif /* __OSMO_DSP_CXVEC_MATH_H__ */
diff --git a/libosmo-dsp/include/osmocom/dsp/iqbal.h b/libosmo-dsp/include/osmocom/dsp/iqbal.h
new file mode 100644
index 0000000..c7f7e60
--- /dev/null
+++ b/libosmo-dsp/include/osmocom/dsp/iqbal.h
@@ -0,0 +1,77 @@
+/*
+ * iqbal.h
+ *
+ * IQ balance correction / estimation utilities
+ *
+ * Copyright (C) 2013  Sylvain Munaut <tnt@246tNt.com>
+ *
+ * All Rights Reserved
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef __OSMO_DSP_IQBAL_H__
+#define __OSMO_DSP_IQBAL_H__
+
+/*! \defgroup iqbal IQ balance utilities
+ *  @{
+ */
+
+/*! \file iqbal.h
+ *  \brief Osmocom IQ balance utils header
+ */
+
+#include <complex.h>
+
+#include <osmocom/dsp/cxvec.h>
+
+
+/* IQ balance correction and estimation */
+
+void osmo_iqbal_fix(float complex *out, float complex *in, unsigned int len,
+                    float mag, float phase);
+
+struct osmo_cxvec *
+osmo_iqbal_cxvec_fix(const struct osmo_cxvec *in, float mag, float phase,
+                     struct osmo_cxvec *out);
+
+float
+osmo_iqbal_estimate(const float complex *data,
+                    int fft_size, int fft_count);
+
+float
+osmo_iqbal_cxvec_estimate(const struct osmo_cxvec *sig,
+                          int fft_size, int fft_count);
+
+
+/* IQ balance optimization */ 
+
+/*! \brief Processing options for the IQ balance optimization algorithm */
+struct osmo_iqbal_opts {
+	int fft_size;   	/*!< \brief FFT size to use */
+	int fft_count;  	/*!< \brief Number of FFT to use */
+	int max_iter;   	/*!< \brief Max # iterations per pass */
+	int start_at_prev;	/*!< \brief Use prev values as starting point */
+};
+
+extern const struct osmo_iqbal_opts osmo_iqbal_default_opts;
+
+int
+osmo_iqbal_cxvec_optimize(const struct osmo_cxvec *sig, float *mag, float *phase,
+                          const struct osmo_iqbal_opts *opts);
+
+/*! @} */
+
+#endif /* __OSMO_DSP_IQBAL_H__ */
diff --git a/libosmo-dsp/src/cxvec.c b/libosmo-dsp/src/cxvec.c
new file mode 100644
index 0000000..fcda8af
--- /dev/null
+++ b/libosmo-dsp/src/cxvec.c
@@ -0,0 +1,131 @@
+/*
+ * cxvec.c
+ *
+ * Complex vectors handling
+ *
+ * Copyright (C) 2011  Sylvain Munaut <tnt@246tNt.com>
+ *
+ * All Rights Reserved
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+/*! \addtogroup cxvec
+ *  @{
+ */
+
+/*! \file cxvec.c
+ *  \brief Osmocom Complex vectors implementation
+ */
+
+#include <complex.h>
+#include <math.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include <osmocom/dsp/cxvec.h>
+
+/*! \brief Initialize a vector structure with a given data array
+ *  \param[out] cv The vector to be initialized
+ *  \param[in] data Pointer to the complex data array
+ *  \param[in] len Number of complex samples
+ *
+ *  The data is not copied, it is just referenced.
+ */
+void
+osmo_cxvec_init_from_data(struct osmo_cxvec *cv,
+                          float complex *data, int len)
+{
+	cv->len   = cv->max_len = len;
+	cv->flags = 0;
+	cv->data  = data;
+}
+
+/*! \brief Allocate a complex vector referencing a given data array
+ *  \param[in] data Pointer to the complex data array
+ *  \param[in] len Number of complex samples
+ *
+ *  The data is not copied, it is just referenced.
+ */
+struct osmo_cxvec *
+osmo_cxvec_alloc_from_data(float complex *data, int len)
+{
+	struct osmo_cxvec *cv;
+
+	cv = malloc(sizeof(struct osmo_cxvec));
+	if (!cv)
+		return NULL;
+
+	osmo_cxvec_init_from_data(cv, data, len);
+
+	return cv;
+}
+
+/*! \brief Allocate a complex vector of a given maximum length
+ *  \param[in] max_len Maximum length of data
+ *
+ * Data array is allocated along with the structure, but is uninitialized.
+ * Length is set to 0.
+ */
+struct osmo_cxvec *
+osmo_cxvec_alloc(int max_len)
+{
+	struct osmo_cxvec *cv;
+
+	cv = malloc(sizeof(struct osmo_cxvec) + max_len * sizeof(float complex));
+	if (!cv)
+		return NULL;
+
+	cv->len = 0;
+	cv->max_len = max_len;
+	cv->flags = 0;
+	cv->data = &cv->_data[0];
+
+	return cv;
+}
+
+/*! \brief Free a complex vector (and possibly associated data)
+ *  \param[in] cv Complex vector to free
+ *
+ * Notes: - Can be safely called with NULL
+ *        - If the data was allocated with the vector using
+ *          \ref osmo_cxvec_alloc , it will be free as well. If the
+ *          data was pre-existing ( \ref osmo_cxvec_init_from_data or
+ *          \ref osmo_cxvec_alloc_from_data ) it will not be free'd.
+ */
+void
+osmo_cxvec_free(struct osmo_cxvec *cv)
+{
+	free(cv);
+}
+
+/*! \brief Save the data contained of a vector into a .cfile for debug
+ *  \param[in] cv Complex vector to save
+ *  \param[in] fname Filename to save the data to
+ */
+void
+osmo_cxvec_dbg_dump(struct osmo_cxvec *cv, const char *fname)
+{
+	FILE *f = fopen(fname, "wb");
+	int rv;
+	if (!f)
+		return;
+	rv = fwrite(cv->data, sizeof(float complex), cv->len, f);
+	if (rv != cv->len)
+		fprintf(stderr, "[!] osmo_cxvec_dbg_dump: fwrite failed !\n");
+	fclose(f);
+}
+
+/*! @} */
diff --git a/libosmo-dsp/src/iqbal.c b/libosmo-dsp/src/iqbal.c
new file mode 100644
index 0000000..1d0ea75
--- /dev/null
+++ b/libosmo-dsp/src/iqbal.c
@@ -0,0 +1,366 @@
+/*
+ * iqbal.c
+ *
+ * IQ balance correction / estimation utilities
+ *
+ * Copyright (C) 2013  Sylvain Munaut <tnt@246tNt.com>
+ *
+ * All Rights Reserved
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+/*! \addtogroup iqbal
+ *  @{
+ */
+
+/*! \file iqbal.c
+ *  \brief IQ balance utils implementation
+ */
+
+#include <complex.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <fftw3.h>
+
+#include <osmocom/dsp/cxvec.h>
+#include <osmocom/dsp/cxvec_math.h>
+#include <osmocom/dsp/iqbal.h>
+
+
+/* ------------------------------------------------------------------------ */
+/* IQ balance correction and estimation                                     */
+/* ------------------------------------------------------------------------ */
+
+/*! \brief Apply IQ balance correction to a given complex buffer
+ *  \param[out] out Complex output buffer
+ *  \param[in] in Complex input buffer
+ *  \param[in] len Number of complex samples to process
+ *  \param[in] mag Magnitude correction (approximated)
+ *  \param[in] phase Phase correction (approximated)
+ *
+ *  The input and output buffers can be the same for in-place modification.
+ *
+ *  The applied transform is out[i] = (a * (1 + mag)) + (b + phase * a) * i
+ *  (with in[i] = a+bi).
+ */
+void
+osmo_iqbal_fix(float complex *out, float complex *in, unsigned int len,
+               float mag, float phase)
+{
+	int i;
+
+	for (i=0; i<len; i++) {
+		float complex v = in[i];
+		out[i] = (crealf(v) * (1.0f + mag)) +
+		         (cimagf(v) + phase * crealf(v)) * I;
+	}
+}
+
+/*! \brief Apply IQ balance correction to a given complex vector
+ *  \param[in] in Complex input vector
+ *  \param[in] mag Magnitude correction (approximated)
+ *  \param[in] phase Phase correction (approximated)
+ *  \param[out] out Complex output vector (can be NULL or equal to 'in')
+ *  \returns The output complex vector (or NULL if error)
+ *
+ *  If the 'out' parameter is NULL, a new vector will be allocated
+ *  See \ref osmo_iqbal_fix for details of the correction applied.
+ */
+struct osmo_cxvec *
+osmo_iqbal_cxvec_fix(const struct osmo_cxvec *in, float mag, float phase,
+                     struct osmo_cxvec *out)
+{
+	if (!out)
+		out = osmo_cxvec_alloc(in->len);
+
+	if (!out || out->max_len < in->len)
+		return NULL;
+
+	osmo_iqbal_fix(out->data, in->data, in->len, mag, phase);
+
+	out->len = in->len;
+	out->flags = in->flags;
+
+	return out;
+}
+
+
+/*! \brief Cache for \ref _osmo_iqbal_estimate when doing lots of calls */
+struct _iqbal_estimate_state {
+	float complex *fft;	/*!< \brief Temporary memory for FFT */
+	fftwf_plan fft_plan;	/*!< \brief FFTW plan */
+};
+
+/*! \brief Release a cache object created by \ref _osmo_iqbal_estimate */
+static void
+_osmo_iqbal_estimate_release(struct _iqbal_estimate_state *state)
+{
+	if (!state)
+		return;
+
+	fftwf_destroy_plan(state->fft_plan);
+	free(state->fft);
+
+	free(state);
+}
+
+/*! \brief Objectively estimate IQ balance in a given complex buffer
+ *  \param[in] data Input complex buffer (at least fft_size * fft_count samples)
+ *  \param[in] fft_size Size of the FFT to use internally
+ *  \param[in] fft_count The number of consecutive FFT to use internally
+ *  \param[out] state_p Cache object for multiple calls (can be NULL)
+ *  \returns A number >= 0.0f estimating the IQ balance (the lower, the better)
+ *
+ *  The Cache object should only be used for multiple calls with the same parameters
+ *  and the same size of input vector. Once you don't plan on using it anymore,
+ *  you should call \ref _osmo_iqbal_estimate_release . The initial pointer value
+ *  should also be initialized to NULL.
+ */
+static float
+_osmo_iqbal_estimate(const float complex *data, int fft_size, int fft_count,
+                     struct _iqbal_estimate_state **state_p)
+{
+	float complex *fft;
+	float est = 0.0f;
+	fftwf_plan fft_plan;
+	int i, j;
+
+	if (state_p && *state_p) {
+		fft = (*state_p)->fft;
+		fft_plan = (*state_p)->fft_plan;
+	} else {
+		fft = malloc(sizeof(float complex) * fft_size);
+		fft_plan = fftwf_plan_dft_1d(fft_size, fft, fft, FFTW_FORWARD, FFTW_ESTIMATE);
+	}
+
+	for (i=0; i<fft_count; i++)
+	{
+		float complex corr = 0.0f;
+
+		memcpy(fft, &data[i*fft_size], sizeof(float complex) * fft_size);
+		fftwf_execute(fft_plan);
+
+		for (j=1; j<fft_size/2; j++)
+			corr += fft[fft_size-j] * conjf(fft[j]);
+
+		est += osmo_normsqf(corr); /* / (fft_size / 2); */
+	}
+
+	/* est /= fft_count; */
+
+	if (state_p && !*state_p) {
+		*state_p = malloc(sizeof(struct _iqbal_estimate_state));
+		(*state_p)->fft = fft;
+		(*state_p)->fft_plan = fft_plan;
+	} else if (!state_p) {
+		fftwf_destroy_plan(fft_plan);
+		free(fft);
+	}
+
+	return est;
+}
+
+/*! \brief Objectively estimate IQ balance in a given complex buffer
+ *  \param[in] data Input complex buffer (at least fft_size * fft_count samples)
+ *  \param[in] fft_size Size of the FFT to use internally
+ *  \param[in] fft_count The number of consecutive FFT to use internally
+ *  \returns A number >= 0.0f estimating the IQ balance (the lower, the better)
+ */
+float
+osmo_iqbal_estimate(const float complex *data, int fft_size, int fft_count)
+{
+	return _osmo_iqbal_estimate(data, fft_size, fft_count, NULL);
+}
+
+/*! \brief Objectively estimate IQ balance in a given complex vector
+ *  \param[in] sig Input complex vector (at least fft_size * fft_count samples)
+ *  \param[in] fft_size Size of the FFT to use internally
+ *  \param[in] fft_count The number of consecutive FFT to use internally
+ *  \returns A number >= 0.0f estimating the IQ balance (the lower, the better)
+ */
+float
+osmo_iqbal_cxvec_estimate(const struct osmo_cxvec *sig,
+                          int fft_size, int fft_count)
+{
+	if (sig->len < fft_size * fft_count)
+		return -1.0f;
+
+	return osmo_iqbal_estimate(sig->data, fft_size, fft_count);
+}
+
+
+/* ------------------------------------------------------------------------ */
+/* IQ balance optimization                                                  */
+/* ------------------------------------------------------------------------ */
+
+/*
+ * The actual algorithm used here is inspired by the IQ balancer of SDR#
+ * by Youssef Touil and described here :
+ *
+ * http://sdrsharp.com/index.php/automatic-iq-correction-algorithm
+ *
+ * The main differences are:
+ *  - Objective function uses complex correlation of left/right side of FFT
+ *  - Optimization based on steepest gradient with dynamic step size
+ */
+
+/*! \brief Default values for the optimization algorithm */
+const struct osmo_iqbal_opts osmo_iqbal_default_opts = {
+	.fft_size	= 1024,
+	.fft_count	= 8,
+	.max_iter	= 25,
+	.start_at_prev	= 1,
+};
+
+/*! \brief Internal state structure for the IQ balance optimization algorithm */
+struct _iqbal_state
+{
+	const struct osmo_iqbal_opts *opts; /*!< \brief Options */
+	const struct osmo_cxvec *org;	/*!< \brief Original vector */
+	struct osmo_cxvec *tmp;		/*!< \brief Temporary vector */
+	int feval;			/*!< \brief # of function evaluation */
+	struct _iqbal_estimate_state *cache; /*!< \brief Cache for estimate func */
+};
+
+/*! \brief Optimization objective function - Value
+ *  \param[in] state Current state object of optimization loop
+ *  \param[in] x An array of 2 float for (mag,phase) point to evaluate at
+ *  \returns The value of the objective function at point 'x'
+ */
+static inline float
+_iqbal_objfn_value(struct _iqbal_state *state, float x[2])
+{
+	state->feval++;
+	osmo_iqbal_cxvec_fix(state->org, x[0], x[1], state->tmp);
+	return _osmo_iqbal_estimate(state->tmp->data,
+		state->opts->fft_size, state->opts->fft_count,
+		&state->cache);
+}
+
+/*! \brief Optimization objective function - Gradient estimation
+ *  \param[in] state Current state object of optimization loop
+ *  \param[in] x An array of 2 float for (mag,phase) point to evaluate at
+ *  \param[in] v The value of the objective function at point 'x'
+ *  \param[out] grad An array of 2 float for the estimated gradient at point 'x'
+ */
+static void
+_iqbal_objfn_gradient(struct _iqbal_state *state, float x[2], float v, float grad[2])
+{
+	const float GRAD_STEP = 1e-6f;
+	float xd[2], vd[2];
+
+	xd[0] = x[0] + GRAD_STEP; xd[1] = x[1];
+	vd[0] = _iqbal_objfn_value(state, xd);
+
+	xd[0] = x[0]; xd[1] = x[1] + GRAD_STEP;
+	vd[1] = _iqbal_objfn_value(state, xd);
+
+	grad[0] = (vd[0] - v) / GRAD_STEP;
+	grad[1] = (vd[1] - v) / GRAD_STEP;
+}
+
+/*! \brief Optimization objective function - Value & Gradient estimation
+ *  \param[in] state Current state object of optimization loop
+ *  \param[in] x An array of 2 float for (mag,phase) point to evaluate at
+ *  \param[out] grad An array of 2 float for the estimated gradient at point 'x'
+ *  \returns The value of the objective function at point 'x'
+ */
+static inline float
+_iqbal_objfn_val_gradient(struct _iqbal_state *state, float x[2], float grad[2])
+{
+	float v = _iqbal_objfn_value(state, x);
+	_iqbal_objfn_gradient(state, x, v, grad);
+	return v;
+}
+
+
+/*! \brief Finds the best IQ balance correction parameters for a given signal
+ *  \param[in] sig The input signal to optimize for
+ *  \param[in,out] mag Magnitude correction (See \ref osmo_iqbal_fix)
+ *  \param[in,out] phase Phase correction (See \ref osmo_iqbal_fix)
+ *  \param[in] opts Options of the optimization process (See \ref osmo_iqbal_opts)
+ *
+ *  The mag and phase parameters are pointers to float. If in the options,
+ *  the 'start_at_prev' is enabled, the initial values of those will be used
+ *  and so they should be initialized appropriately.
+ */
+int
+osmo_iqbal_cxvec_optimize(const struct osmo_cxvec *sig, float *mag, float *phase,
+                          const struct osmo_iqbal_opts *opts)
+{
+	struct _iqbal_state _state, *state = &_state;
+	float cv, nv, step;
+	float cx[2], nx[2];
+	float cgrad[2];
+	float p;
+	int i;
+
+	if (!opts)
+		opts = &osmo_iqbal_default_opts;
+
+	if (sig->len < (opts->fft_size * opts->fft_count))
+		return -1;
+
+	state->org = sig;
+	state->tmp = osmo_cxvec_alloc(sig->len);
+	state->opts = opts;
+	state->feval = 0;
+	state->cache = NULL;
+
+	if (opts->start_at_prev) {
+		cx[0] = *mag;
+		cx[1] = *phase;
+	} else {
+		cx[0] = 0.0f;
+		cx[1] = 0.0f;
+	}
+
+	cv = _iqbal_objfn_val_gradient(state, cx, cgrad);
+	step = cv / (fabs(cgrad[0]) + fabs(cgrad[1]));
+
+	for (i=0; i<opts->max_iter; i++)
+	{
+		nx[0] = cx[0] - step * (cgrad[0] / (fabs(cgrad[0]) + fabs(cgrad[1])));
+		nx[1] = cx[1] - step * (cgrad[1] / (fabs(cgrad[0]) + fabs(cgrad[1])));
+
+		nv = _iqbal_objfn_value(state, nx);
+
+		if (nv <= cv) {
+			p = (cv - nv) / cv;
+
+			cx[0] = nx[0];
+			cx[1] = nx[1];
+			cv = nv;
+			_iqbal_objfn_gradient(state, cx, cv, cgrad);
+
+			if (p < 0.01f)
+				break;
+		} else {
+			step /= 2.0 * (nv / cv);
+		}
+	}
+
+	osmo_cxvec_free(state->tmp);
+	_osmo_iqbal_estimate_release(state->cache);
+
+	*mag   = cx[0];
+	*phase = cx[1];
+
+	return 0;
+}
+
+/*! @} */
-- 
2.40.0

